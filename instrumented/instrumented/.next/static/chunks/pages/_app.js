function cov_7dniywjhg() {
  var path = "/Users/hadad/Desktop/melliom/gigs/zatec/ice-and-fire/instrumented/.next/static/chunks/pages/_app.js";
  var hash = "cafed5deda8d66d640299b4a61029d4865240725";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/hadad/Desktop/melliom/gigs/zatec/ice-and-fire/instrumented/.next/static/chunks/pages/_app.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 13
        },
        end: {
          line: 2,
          column: 101
        }
      },
      "1": {
        start: {
          line: 3,
          column: 13
        },
        end: {
          line: 3,
          column: 55
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 12
        },
        end: {
          line: 5,
          column: 26
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 496,
          column: 3
        }
      },
      "5": {
        start: {
          line: 497,
          column: 17
        },
        end: {
          line: 497,
          column: 50
        }
      },
      "6": {
        start: {
          line: 498,
          column: 2
        },
        end: {
          line: 500,
          column: 3
        }
      },
      "7": {
        start: {
          line: 499,
          column: 4
        },
        end: {
          line: 499,
          column: 34
        }
      },
      "8": {
        start: {
          line: 501,
          column: 23
        },
        end: {
          line: 501,
          column: 37
        }
      },
      "9": {
        start: {
          line: 504,
          column: 4
        },
        end: {
          line: 506,
          column: 6
        }
      },
      "10": {
        start: {
          line: 505,
          column: 6
        },
        end: {
          line: 505,
          column: 28
        }
      },
      "11": {
        start: {
          line: 508,
          column: 2
        },
        end: {
          line: 508,
          column: 24
        }
      },
      "12": {
        start: {
          line: 510,
          column: 0
        },
        end: {
          line: 510,
          column: 17
        }
      },
      "13": {
        start: {
          line: 511,
          column: 0
        },
        end: {
          line: 511,
          column: 24
        }
      },
      "14": {
        start: {
          line: 520,
          column: 0
        },
        end: {
          line: 659,
          column: 4
        }
      },
      "15": {
        start: {
          line: 529,
          column: 4
        },
        end: {
          line: 529,
          column: 28
        }
      },
      "16": {
        start: {
          line: 530,
          column: 4
        },
        end: {
          line: 530,
          column: 28
        }
      },
      "17": {
        start: {
          line: 531,
          column: 4
        },
        end: {
          line: 531,
          column: 6213
        }
      },
      "18": {
        start: {
          line: 544,
          column: 4
        },
        end: {
          line: 544,
          column: 28
        }
      },
      "19": {
        start: {
          line: 545,
          column: 4
        },
        end: {
          line: 545,
          column: 28
        }
      },
      "20": {
        start: {
          line: 546,
          column: 4
        },
        end: {
          line: 546,
          column: 8441
        }
      },
      "21": {
        start: {
          line: 557,
          column: 4
        },
        end: {
          line: 557,
          column: 28
        }
      },
      "22": {
        start: {
          line: 558,
          column: 4
        },
        end: {
          line: 558,
          column: 28
        }
      },
      "23": {
        start: {
          line: 559,
          column: 4
        },
        end: {
          line: 559,
          column: 1496
        }
      },
      "24": {
        start: {
          line: 570,
          column: 4
        },
        end: {
          line: 570,
          column: 28
        }
      },
      "25": {
        start: {
          line: 571,
          column: 4
        },
        end: {
          line: 571,
          column: 28
        }
      },
      "26": {
        start: {
          line: 572,
          column: 4
        },
        end: {
          line: 572,
          column: 12213
        }
      },
      "27": {
        start: {
          line: 585,
          column: 4
        },
        end: {
          line: 585,
          column: 28
        }
      },
      "28": {
        start: {
          line: 586,
          column: 4
        },
        end: {
          line: 586,
          column: 28
        }
      },
      "29": {
        start: {
          line: 587,
          column: 4
        },
        end: {
          line: 587,
          column: 20808
        }
      },
      "30": {
        start: {
          line: 600,
          column: 4
        },
        end: {
          line: 600,
          column: 28
        }
      },
      "31": {
        start: {
          line: 601,
          column: 4
        },
        end: {
          line: 601,
          column: 28
        }
      },
      "32": {
        start: {
          line: 602,
          column: 4
        },
        end: {
          line: 602,
          column: 5577
        }
      },
      "33": {
        start: {
          line: 615,
          column: 4
        },
        end: {
          line: 615,
          column: 28
        }
      },
      "34": {
        start: {
          line: 616,
          column: 4
        },
        end: {
          line: 616,
          column: 28
        }
      },
      "35": {
        start: {
          line: 617,
          column: 4
        },
        end: {
          line: 617,
          column: 108268
        }
      },
      "36": {
        start: {
          line: 630,
          column: 4
        },
        end: {
          line: 630,
          column: 28
        }
      },
      "37": {
        start: {
          line: 631,
          column: 4
        },
        end: {
          line: 631,
          column: 28
        }
      },
      "38": {
        start: {
          line: 632,
          column: 4
        },
        end: {
          line: 632,
          column: 1045
        }
      },
      "39": {
        start: {
          line: 637,
          column: 2
        },
        end: {
          line: 637,
          column: 26
        }
      },
      "40": {
        start: {
          line: 638,
          column: 2
        },
        end: {
          line: 638,
          column: 26
        }
      },
      "41": {
        start: {
          line: 641,
          column: 25
        },
        end: {
          line: 645,
          column: 3
        }
      },
      "42": {
        start: {
          line: 642,
          column: 4
        },
        end: {
          line: 642,
          column: 28
        }
      },
      "43": {
        start: {
          line: 643,
          column: 4
        },
        end: {
          line: 643,
          column: 29
        }
      },
      "44": {
        start: {
          line: 644,
          column: 4
        },
        end: {
          line: 644,
          column: 65
        }
      },
      "45": {
        start: {
          line: 647,
          column: 2
        },
        end: {
          line: 647,
          column: 27
        }
      },
      "46": {
        start: {
          line: 648,
          column: 2
        },
        end: {
          line: 652,
          column: 5
        }
      },
      "47": {
        start: {
          line: 649,
          column: 4
        },
        end: {
          line: 649,
          column: 29
        }
      },
      "48": {
        start: {
          line: 650,
          column: 4
        },
        end: {
          line: 650,
          column: 29
        }
      },
      "49": {
        start: {
          line: 651,
          column: 4
        },
        end: {
          line: 651,
          column: 226
        }
      },
      "50": {
        start: {
          line: 654,
          column: 29
        },
        end: {
          line: 654,
          column: 78
        }
      },
      "51": {
        start: {
          line: 656,
          column: 2
        },
        end: {
          line: 656,
          column: 27
        }
      },
      "52": {
        start: {
          line: 657,
          column: 2
        },
        end: {
          line: 657,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "cov_2075eb4ms5",
        decl: {
          start: {
            line: 1,
            column: 9
          },
          end: {
            line: 1,
            column: 23
          }
        },
        loc: {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 509,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 504,
            column: 21
          },
          end: {
            line: 504,
            column: 22
          }
        },
        loc: {
          start: {
            line: 504,
            column: 33
          },
          end: {
            line: 506,
            column: 5
          }
        },
        line: 504
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 526,
            column: 2
          },
          end: {
            line: 526,
            column: 3
          }
        },
        loc: {
          start: {
            line: 526,
            column: 62
          },
          end: {
            line: 534,
            column: 3
          }
        },
        line: 526
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 541,
            column: 2
          },
          end: {
            line: 541,
            column: 3
          }
        },
        loc: {
          start: {
            line: 541,
            column: 67
          },
          end: {
            line: 549,
            column: 3
          }
        },
        line: 541
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 556,
            column: 2
          },
          end: {
            line: 556,
            column: 3
          }
        },
        loc: {
          start: {
            line: 556,
            column: 67
          },
          end: {
            line: 562,
            column: 3
          }
        },
        line: 556
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 569,
            column: 2
          },
          end: {
            line: 569,
            column: 3
          }
        },
        loc: {
          start: {
            line: 569,
            column: 67
          },
          end: {
            line: 575,
            column: 3
          }
        },
        line: 569
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 582,
            column: 2
          },
          end: {
            line: 582,
            column: 3
          }
        },
        loc: {
          start: {
            line: 582,
            column: 67
          },
          end: {
            line: 590,
            column: 3
          }
        },
        line: 582
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 597,
            column: 2
          },
          end: {
            line: 597,
            column: 3
          }
        },
        loc: {
          start: {
            line: 597,
            column: 62
          },
          end: {
            line: 605,
            column: 3
          }
        },
        line: 597
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 612,
            column: 2
          },
          end: {
            line: 612,
            column: 3
          }
        },
        loc: {
          start: {
            line: 612,
            column: 67
          },
          end: {
            line: 620,
            column: 3
          }
        },
        line: 612
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 627,
            column: 2
          },
          end: {
            line: 627,
            column: 3
          }
        },
        loc: {
          start: {
            line: 627,
            column: 67
          },
          end: {
            line: 635,
            column: 3
          }
        },
        line: 627
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 636,
            column: 11
          },
          end: {
            line: 636,
            column: 12
          }
        },
        loc: {
          start: {
            line: 636,
            column: 42
          },
          end: {
            line: 659,
            column: 1
          }
        },
        line: 636
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 641,
            column: 25
          },
          end: {
            line: 641,
            column: 26
          }
        },
        loc: {
          start: {
            line: 641,
            column: 45
          },
          end: {
            line: 645,
            column: 3
          }
        },
        line: 641
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 648,
            column: 37
          },
          end: {
            line: 648,
            column: 38
          }
        },
        loc: {
          start: {
            line: 648,
            column: 49
          },
          end: {
            line: 652,
            column: 3
          }
        },
        line: 648
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 497,
            column: 17
          },
          end: {
            line: 497,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 497,
            column: 17
          },
          end: {
            line: 497,
            column: 28
          }
        }, {
          start: {
            line: 497,
            column: 33
          },
          end: {
            line: 497,
            column: 49
          }
        }],
        line: 497
      },
      "1": {
        loc: {
          start: {
            line: 498,
            column: 2
          },
          end: {
            line: 500,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 2
          },
          end: {
            line: 500,
            column: 3
          }
        }, {
          start: {
            line: 498,
            column: 2
          },
          end: {
            line: 500,
            column: 3
          }
        }],
        line: 498
      },
      "2": {
        loc: {
          start: {
            line: 498,
            column: 6
          },
          end: {
            line: 498,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 498,
            column: 6
          },
          end: {
            line: 498,
            column: 21
          }
        }, {
          start: {
            line: 498,
            column: 25
          },
          end: {
            line: 498,
            column: 53
          }
        }],
        line: 498
      },
      "3": {
        loc: {
          start: {
            line: 520,
            column: 28
          },
          end: {
            line: 520,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 520,
            column: 29
          },
          end: {
            line: 520,
            column: 81
          }
        }, {
          start: {
            line: 520,
            column: 87
          },
          end: {
            line: 520,
            column: 117
          }
        }],
        line: 520
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      names: ["self", "push", "module", "__webpack_exports__", "__webpack_require__", "eval", "ts", "__unused_webpack_exports", "__unused_webpack_module", "exports", "__webpack_exec__", "moduleId", "s", "O", "_N_E"],
      sources: ["_app.js"],
      sourcesContent: ["/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[\"pages/_app\"],{\n\n/***/ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\":\n/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss ***!\n  \\***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(__webpack_require__.ts(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \\\"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\\\");\\n/* harmony import */ var _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\\n// Imports\\n\\nvar ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\\n// Module\\n___CSS_LOADER_EXPORT___.push([module.id, \\\"html,\\\\nbody {\\\\n  padding: 0;\\\\n  margin: 0;\\\\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\\\\n}\\\\n\\\\na {\\\\n  color: inherit;\\\\n  text-decoration: none;\\\\n}\\\\n\\\\n* {\\\\n  box-sizing: border-box;\\\\n}\\\\n\\\\n@media (prefers-color-scheme: dark) {\\\\n  html {\\\\n    color-scheme: dark;\\\\n  }\\\\n  body {\\\\n    color: white;\\\\n    background: black;\\\\n  }\\\\n}\\\", \\\"\\\",{\\\"version\\\":3,\\\"sources\\\":[\\\"webpack://styles/globals.scss\\\"],\\\"names\\\":[],\\\"mappings\\\":\\\"AAAA;;EAEE,UAAA;EACA,SAAA;EACA,8IAAA;AACF;;AAGA;EACE,cAAA;EACA,qBAAA;AAAF;;AAGA;EACE,sBAAA;AAAF;;AAGA;EACE;IACE,kBAAA;EAAF;EAEA;IACE,YAAA;IACA,iBAAA;EAAF;AACF\\\",\\\"sourcesContent\\\":[\\\"html,\\\\nbody {\\\\n  padding: 0;\\\\n  margin: 0;\\\\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\\\\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\\\\n}\\\\n\\\\na {\\\\n  color: inherit;\\\\n  text-decoration: none;\\\\n}\\\\n\\\\n* {\\\\n  box-sizing: border-box;\\\\n}\\\\n\\\\n@media (prefers-color-scheme: dark) {\\\\n  html {\\\\n    color-scheme: dark;\\\\n  }\\\\n  body {\\\\n    color: white;\\\\n    background: black;\\\\n  }\\\\n}\\\\n\\\"],\\\"sourceRoot\\\":\\\"\\\"}]);\\n// Exports\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (___CSS_LOADER_EXPORT___);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzFdIS4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbMl0hLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVszXSEuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvc2Fzcy1sb2FkZXIvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbNF0hLi9zdHlsZXMvZ2xvYmFscy5zY3NzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ3dIO0FBQ3hILDhCQUE4QixrSEFBMkI7QUFDekQ7QUFDQSx1REFBdUQsZUFBZSxjQUFjLG1KQUFtSixHQUFHLE9BQU8sbUJBQW1CLDBCQUEwQixHQUFHLE9BQU8sMkJBQTJCLEdBQUcseUNBQXlDLFVBQVUseUJBQXlCLEtBQUssVUFBVSxtQkFBbUIsd0JBQXdCLEtBQUssR0FBRyxPQUFPLHFGQUFxRixVQUFVLFVBQVUsV0FBVyxNQUFNLEtBQUssVUFBVSxXQUFXLE1BQU0sS0FBSyxXQUFXLE1BQU0sS0FBSyxLQUFLLFdBQVcsS0FBSyxLQUFLLFVBQVUsV0FBVyxLQUFLLHNDQUFzQyxlQUFlLGNBQWMsd0pBQXdKLEdBQUcsT0FBTyxtQkFBbUIsMEJBQTBCLEdBQUcsT0FBTywyQkFBMkIsR0FBRyx5Q0FBeUMsVUFBVSx5QkFBeUIsS0FBSyxVQUFVLG1CQUFtQix3QkFBd0IsS0FBSyxHQUFHLHFCQUFxQjtBQUNqcUM7QUFDQSwrREFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvZ2xvYmFscy5zY3NzPzdhYjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsXFxuYm9keSB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgU2Vnb2UgVUksIFJvYm90bywgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgRmlyYSBTYW5zLCBEcm9pZCBTYW5zLCBIZWx2ZXRpY2EgTmV1ZSwgc2Fucy1zZXJpZjtcXG59XFxuXFxuYSB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxuICBodG1sIHtcXG4gICAgY29sb3Itc2NoZW1lOiBkYXJrO1xcbiAgfVxcbiAgYm9keSB7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgYmFja2dyb3VuZDogYmxhY2s7XFxuICB9XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zdHlsZXMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztFQUVFLFVBQUE7RUFDQSxTQUFBO0VBQ0EsOElBQUE7QUFDRjs7QUFHQTtFQUNFLGNBQUE7RUFDQSxxQkFBQTtBQUFGOztBQUdBO0VBQ0Usc0JBQUE7QUFBRjs7QUFHQTtFQUNFO0lBQ0Usa0JBQUE7RUFBRjtFQUVBO0lBQ0UsWUFBQTtJQUNBLGlCQUFBO0VBQUY7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sLFxcbmJvZHkge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFNlZ29lIFVJLCBSb2JvdG8sIE94eWdlbixcXG4gICAgVWJ1bnR1LCBDYW50YXJlbGwsIEZpcmEgU2FucywgRHJvaWQgU2FucywgSGVsdmV0aWNhIE5ldWUsIHNhbnMtc2VyaWY7XFxufVxcblxcbmEge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbioge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xcbiAgaHRtbCB7XFxuICAgIGNvbG9yLXNjaGVtZTogZGFyaztcXG4gIH1cXG4gIGJvZHkge1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGJhY2tncm91bmQ6IGJsYWNrO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\\n\"));\n\n/***/ }),\n\n/***/ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\":\n/*!************************************************************************************!*\\\n  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js ***!\n  \\************************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\"use strict\";\neval(__webpack_require__.ts(\"\\n/*\\n  MIT License http://www.opensource.org/licenses/mit-license.php\\n  Author Tobias Koppers @sokra\\n*/ // css base code, injected by the css-loader\\n// eslint-disable-next-line func-names\\nmodule.exports = function(useSourceMap) {\\n    var list = [] // return the list of modules as css string\\n    ;\\n    list.toString = function toString() {\\n        return this.map(function(item) {\\n            var content = cssWithMappingToString(item, useSourceMap);\\n            if (item[2]) {\\n                return \\\"@media \\\".concat(item[2], \\\" {\\\").concat(content, \\\"}\\\");\\n            }\\n            return content;\\n        }).join(\\\"\\\");\\n    } // import a list of modules into the list\\n    ;\\n    // eslint-disable-next-line func-names\\n    list.i = function(modules, mediaQuery, dedupe) {\\n        if (typeof modules === \\\"string\\\") {\\n            // eslint-disable-next-line no-param-reassign\\n            modules = [\\n                [\\n                    null,\\n                    modules,\\n                    \\\"\\\"\\n                ]\\n            ];\\n        }\\n        var alreadyImportedModules = {};\\n        if (dedupe) {\\n            for(var i = 0; i < this.length; i++){\\n                // eslint-disable-next-line prefer-destructuring\\n                var id = this[i][0];\\n                if (id != null) {\\n                    alreadyImportedModules[id] = true;\\n                }\\n            }\\n        }\\n        for(var _i = 0; _i < modules.length; _i++){\\n            var item = [].concat(modules[_i]);\\n            if (dedupe && alreadyImportedModules[item[0]]) {\\n                continue;\\n            }\\n            if (mediaQuery) {\\n                if (!item[2]) {\\n                    item[2] = mediaQuery;\\n                } else {\\n                    item[2] = \\\"\\\".concat(mediaQuery, \\\" and \\\").concat(item[2]);\\n                }\\n            }\\n            list.push(item);\\n        }\\n    };\\n    return list;\\n};\\nfunction cssWithMappingToString(item, useSourceMap) {\\n    var content = item[1] || \\\"\\\" // eslint-disable-next-line prefer-destructuring\\n    ;\\n    var cssMapping = item[3];\\n    if (!cssMapping) {\\n        return content;\\n    }\\n    if (useSourceMap && typeof btoa === \\\"function\\\") {\\n        var sourceMapping = toComment(cssMapping);\\n        var sourceURLs = cssMapping.sources.map(function(source) {\\n            return \\\"/*# sourceURL=\\\".concat(cssMapping.sourceRoot || \\\"\\\").concat(source, \\\" */\\\");\\n        });\\n        return [\\n            content\\n        ].concat(sourceURLs).concat([\\n            sourceMapping\\n        ]).join(\\\"\\\\n\\\");\\n    }\\n    return [\\n        content\\n    ].join(\\\"\\\\n\\\");\\n} // Adapted from convert-source-map (MIT)\\nfunction toComment(sourceMap) {\\n    // eslint-disable-next-line no-undef\\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\\n    var data = \\\"sourceMappingURL=data:application/json;charset=utf-8;base64,\\\".concat(base64);\\n    return \\\"/*# \\\".concat(data, \\\" */\\\");\\n}\\n\\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9ydW50aW1lL2FwaS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxxQkFBcUI7QUFDekU7QUFDQTtBQUNBLFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvcnVudGltZS9hcGkuanM/Y2E0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovIC8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcbiAgICB2YXIgbGlzdCA9IFtdIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgICA7XG4gICAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG4gICAgICAgICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgfSAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAgIDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgbW9kdWxlcyA9IFtcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZXMsXG4gICAgICAgICAgICAgICAgICAgIFwiXCJcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgICAgIGlmIChkZWR1cGUpIHtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuICAgICAgICAgICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspe1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuICAgICAgICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gbGlzdDtcbn07XG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICAgIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCBcIlwiIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgIDtcbiAgICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gICAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbiAgICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjb250ZW50XG4gICAgICAgIF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbXG4gICAgICAgICAgICBzb3VyY2VNYXBwaW5nXG4gICAgICAgIF0pLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIGNvbnRlbnRcbiAgICBdLmpvaW4oXCJcXG5cIik7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\\n\"));\n\n/***/ }),\n\n/***/ \"./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\":\n/*!*******************************************************************************************************************************************!*\\\n  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app! ***!\n  \\*******************************************************************************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\neval(__webpack_require__.ts(\"\\n    (window.__NEXT_P = window.__NEXT_P || []).push([\\n      \\\"/_app\\\",\\n      function () {\\n        return __webpack_require__(/*! private-next-pages/_app */ \\\"./pages/_app.tsx\\\");\\n      }\\n    ]);\\n    if(true) {\\n      module.hot.dispose(function () {\\n        window.__NEXT_P.push([\\\"/_app\\\"])\\n      });\\n    }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfYXBwJnBhZ2U9JTJGX2FwcCEuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxpREFBeUI7QUFDaEQ7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzY3ODIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9fYXBwXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19hcHBcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL19hcHBcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\\n\"));\n\n/***/ }),\n\n/***/ \"./styles/globals.scss\":\n/*!*****************************!*\\\n  !*** ./styles/globals.scss ***!\n  \\*****************************/\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\neval(__webpack_require__.ts(\"var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \\\"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\\\");\\n            var content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!../node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./globals.scss */ \\\"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\\\");\\n\\n            content = content.__esModule ? content.default : content;\\n\\n            if (typeof content === 'string') {\\n              content = [[module.id, content, '']];\\n            }\\n\\nvar options = {};\\n\\noptions.insert = function(element) {\\n                    // By default, style-loader injects CSS into the bottom\\n                    // of <head>. This causes ordering problems between dev\\n                    // and prod. To fix this, we render a <noscript> tag as\\n                    // an anchor for the styles to be placed before. These\\n                    // styles will be applied _before_ <style jsx global>.\\n                    // These elements should always exist. If they do not,\\n                    // this code should fail.\\n                    var anchorElement = document.querySelector(\\\"#__next_css__DO_NOT_USE__\\\");\\n                    var parentNode = anchorElement.parentNode// Normally <head>\\n                    ;\\n                    // Each style tag should be placed right before our\\n                    // anchor. By inserting before and not after, we do not\\n                    // need to track the last inserted element.\\n                    parentNode.insertBefore(element, anchorElement);\\n                };\\noptions.singleton = false;\\n\\nvar update = api(content, options);\\n\\n\\nif (true) {\\n  if (!content.locals || module.hot.invalidate) {\\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\\n    if (!a && b || a && !b) {\\n        return false;\\n    }\\n    let p;\\n    for(p in a){\\n        if (isNamedExport && p === \\\"default\\\") {\\n            continue;\\n        }\\n        if (a[p] !== b[p]) {\\n            return false;\\n        }\\n    }\\n    for(p in b){\\n        if (isNamedExport && p === \\\"default\\\") {\\n            continue;\\n        }\\n        if (!a[p]) {\\n            return false;\\n        }\\n    }\\n    return true;\\n};\\n    var oldLocals = content.locals;\\n\\n    module.hot.accept(\\n      /*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!../node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./globals.scss */ \\\"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\\\",\\n      function () {\\n        content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!../node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./globals.scss */ \\\"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\\\");\\n\\n              content = content.__esModule ? content.default : content;\\n\\n              if (typeof content === 'string') {\\n                content = [[module.id, content, '']];\\n              }\\n\\n              if (!isEqualLocals(oldLocals, content.locals)) {\\n                module.hot.invalidate();\\n\\n                return;\\n              }\\n\\n              oldLocals = content.locals;\\n\\n              update(content);\\n      }\\n    )\\n  }\\n\\n  module.hot.dispose(function() {\\n    update();\\n  });\\n}\\n\\nmodule.exports = content.locals || {};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvZ2xvYmFscy5zY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyxvTkFBd0c7QUFDMUgsMEJBQTBCLG1CQUFPLENBQUMsdTRCQUFnYzs7QUFFbGU7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLElBQUksSUFBVTtBQUNkLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGlCQUFpQjtBQUNyQixNQUFNLHU0QkFBZ2M7QUFDdGM7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyx1NEJBQWdjOztBQUUxZDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsVUFBVTs7QUFFMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLFVBQVU7QUFDWjtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvZ2xvYmFscy5zY3NzP2MyM2QiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1zdHlsZS1sb2FkZXIvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbMV0hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbMl0hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbM10hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9zYXNzLWxvYWRlci9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVs0XSEuL2dsb2JhbHMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCwgc3R5bGUtbG9hZGVyIGluamVjdHMgQ1NTIGludG8gdGhlIGJvdHRvbVxuICAgICAgICAgICAgICAgICAgICAvLyBvZiA8aGVhZD4uIFRoaXMgY2F1c2VzIG9yZGVyaW5nIHByb2JsZW1zIGJldHdlZW4gZGV2XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBwcm9kLiBUbyBmaXggdGhpcywgd2UgcmVuZGVyIGEgPG5vc2NyaXB0PiB0YWcgYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYW4gYW5jaG9yIGZvciB0aGUgc3R5bGVzIHRvIGJlIHBsYWNlZCBiZWZvcmUuIFRoZXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgX2JlZm9yZV8gPHN0eWxlIGpzeCBnbG9iYWw+LlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBlbGVtZW50cyBzaG91bGQgYWx3YXlzIGV4aXN0LiBJZiB0aGV5IGRvIG5vdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjb2RlIHNob3VsZCBmYWlsLlxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjX19uZXh0X2Nzc19fRE9fTk9UX1VTRV9fXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFuY2hvckVsZW1lbnQucGFyZW50Tm9kZS8vIE5vcm1hbGx5IDxoZWFkPlxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVhY2ggc3R5bGUgdGFnIHNob3VsZCBiZSBwbGFjZWQgcmlnaHQgYmVmb3JlIG91clxuICAgICAgICAgICAgICAgICAgICAvLyBhbmNob3IuIEJ5IGluc2VydGluZyBiZWZvcmUgYW5kIG5vdCBhZnRlciwgd2UgZG8gbm90XG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gdHJhY2sgdGhlIGxhc3QgaW5zZXJ0ZWQgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgYW5jaG9yRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfTtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2FscyB8fCBtb2R1bGUuaG90LmludmFsaWRhdGUpIHtcbiAgICB2YXIgaXNFcXVhbExvY2FscyA9IGZ1bmN0aW9uIGlzRXF1YWxMb2NhbHMoYSwgYiwgaXNOYW1lZEV4cG9ydCkge1xuICAgIGlmICghYSAmJiBiIHx8IGEgJiYgIWIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgcDtcbiAgICBmb3IocCBpbiBhKXtcbiAgICAgICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhW3BdICE9PSBiW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKHAgaW4gYil7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFbcF0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4gICAgdmFyIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVsxXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVsyXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVszXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Nhc3MtbG9hZGVyL2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzRdIS4vZ2xvYmFscy5zY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzFdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzJdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzNdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvc2Fzcy1sb2FkZXIvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbNF0hLi9nbG9iYWxzLnNjc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./styles/globals.scss\\n\"));\n\n/***/ }),\n\n/***/ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\":\n/*!************************************************************************************************************!*\\\n  !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!\n  \\************************************************************************************************************/\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\"use strict\";\neval(__webpack_require__.ts(\"\\nconst isOldIE = function isOldIE() {\\n    let memo;\\n    return function memorize() {\\n        if (typeof memo === \\\"undefined\\\") {\\n            // Test for IE <= 9 as proposed by Browserhacks\\n            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\\n            // Tests for existence of standard globals is to allow style-loader\\n            // to operate correctly into non-standard environments\\n            // @see https://github.com/webpack-contrib/style-loader/issues/177\\n            memo = Boolean(window && document && document.all && !window.atob);\\n        }\\n        return memo;\\n    };\\n}();\\nconst getTarget = function getTarget() {\\n    const memo = {};\\n    return function memorize(target) {\\n        if (typeof memo[target] === \\\"undefined\\\") {\\n            let styleTarget = document.querySelector(target);\\n            // Special case to return head of iframe instead of iframe itself\\n            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\\n                try {\\n                    // This will throw an exception if access to iframe is blocked\\n                    // due to cross-origin restrictions\\n                    styleTarget = styleTarget.contentDocument.head;\\n                } catch (e) {\\n                    // istanbul ignore next\\n                    styleTarget = null;\\n                }\\n            }\\n            memo[target] = styleTarget;\\n        }\\n        return memo[target];\\n    };\\n}();\\nconst stylesInDom = [];\\nfunction getIndexByIdentifier(identifier) {\\n    let result = -1;\\n    for(let i = 0; i < stylesInDom.length; i++){\\n        if (stylesInDom[i].identifier === identifier) {\\n            result = i;\\n            break;\\n        }\\n    }\\n    return result;\\n}\\nfunction modulesToDom(list, options) {\\n    const idCountMap = {};\\n    const identifiers = [];\\n    for(let i = 0; i < list.length; i++){\\n        const item = list[i];\\n        const id = options.base ? item[0] + options.base : item[0];\\n        const count = idCountMap[id] || 0;\\n        const identifier = id + \\\" \\\" + count.toString();\\n        idCountMap[id] = count + 1;\\n        const index = getIndexByIdentifier(identifier);\\n        const obj = {\\n            css: item[1],\\n            media: item[2],\\n            sourceMap: item[3]\\n        };\\n        if (index !== -1) {\\n            stylesInDom[index].references++;\\n            stylesInDom[index].updater(obj);\\n        } else {\\n            stylesInDom.push({\\n                identifier: identifier,\\n                updater: addStyle(obj, options),\\n                references: 1\\n            });\\n        }\\n        identifiers.push(identifier);\\n    }\\n    return identifiers;\\n}\\nfunction insertStyleElement(options) {\\n    const style = document.createElement(\\\"style\\\");\\n    const attributes = options.attributes || {};\\n    if (typeof attributes.nonce === \\\"undefined\\\") {\\n        const nonce = // eslint-disable-next-line no-undef\\n         true ? __webpack_require__.nc : 0;\\n        if (nonce) {\\n            attributes.nonce = nonce;\\n        }\\n    }\\n    Object.keys(attributes).forEach(function(key) {\\n        style.setAttribute(key, attributes[key]);\\n    });\\n    if (typeof options.insert === \\\"function\\\") {\\n        options.insert(style);\\n    } else {\\n        const target = getTarget(options.insert || \\\"head\\\");\\n        if (!target) {\\n            throw new Error(\\\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\\\");\\n        }\\n        target.appendChild(style);\\n    }\\n    return style;\\n}\\nfunction removeStyleElement(style) {\\n    // istanbul ignore if\\n    if (style.parentNode === null) {\\n        return false;\\n    }\\n    style.parentNode.removeChild(style);\\n}\\n/* istanbul ignore next  */ const replaceText = function replaceText() {\\n    const textStore = [];\\n    return function replace(index, replacement) {\\n        textStore[index] = replacement;\\n        return textStore.filter(Boolean).join(\\\"\\\\n\\\");\\n    };\\n}();\\nfunction applyToSingletonTag(style, index, remove, obj) {\\n    const css = remove ? \\\"\\\" : obj.media ? \\\"@media \\\" + obj.media + \\\" {\\\" + obj.css + \\\"}\\\" : obj.css;\\n    // For old IE\\n    /* istanbul ignore if  */ if (style.styleSheet) {\\n        style.styleSheet.cssText = replaceText(index, css);\\n    } else {\\n        const cssNode = document.createTextNode(css);\\n        const childNodes = style.childNodes;\\n        if (childNodes[index]) {\\n            style.removeChild(childNodes[index]);\\n        }\\n        if (childNodes.length) {\\n            style.insertBefore(cssNode, childNodes[index]);\\n        } else {\\n            style.appendChild(cssNode);\\n        }\\n    }\\n}\\nfunction applyToTag(style, options, obj) {\\n    let css = obj.css;\\n    const media = obj.media;\\n    const sourceMap = obj.sourceMap;\\n    if (media) {\\n        style.setAttribute(\\\"media\\\", media);\\n    } else {\\n        style.removeAttribute(\\\"media\\\");\\n    }\\n    if (sourceMap && typeof btoa !== \\\"undefined\\\") {\\n        css += \\\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \\\" */\\\";\\n    }\\n    // For old IE\\n    /* istanbul ignore if  */ if (style.styleSheet) {\\n        style.styleSheet.cssText = css;\\n    } else {\\n        while(style.firstChild){\\n            style.removeChild(style.firstChild);\\n        }\\n        style.appendChild(document.createTextNode(css));\\n    }\\n}\\nlet singleton = null;\\nlet singletonCounter = 0;\\nfunction addStyle(obj, options) {\\n    let style;\\n    let update;\\n    let remove;\\n    if (options.singleton) {\\n        const styleIndex = singletonCounter++;\\n        style = singleton || (singleton = insertStyleElement(options));\\n        update = applyToSingletonTag.bind(null, style, styleIndex, false);\\n        remove = applyToSingletonTag.bind(null, style, styleIndex, true);\\n    } else {\\n        style = insertStyleElement(options);\\n        update = applyToTag.bind(null, style, options);\\n        remove = function() {\\n            removeStyleElement(style);\\n        };\\n    }\\n    update(obj);\\n    return function updateStyle(newObj) {\\n        if (newObj) {\\n            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\\n                return;\\n            }\\n            update(obj = newObj);\\n        } else {\\n            remove();\\n        }\\n    };\\n}\\nmodule.exports = function(list, options) {\\n    options = options || {};\\n    // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\\n    // tags it will allow on a page\\n    if (!options.singleton && typeof options.singleton !== \\\"boolean\\\") {\\n        options.singleton = isOldIE();\\n    }\\n    list = list || [];\\n    let lastIdentifiers = modulesToDom(list, options);\\n    return function update(newList) {\\n        newList = newList || [];\\n        if (Object.prototype.toString.call(newList) !== \\\"[object Array]\\\") {\\n            return;\\n        }\\n        for(let i = 0; i < lastIdentifiers.length; i++){\\n            const identifier = lastIdentifiers[i];\\n            const index = getIndexByIdentifier(identifier);\\n            stylesInDom[index].references--;\\n        }\\n        const newLastIdentifiers = modulesToDom(newList, options);\\n        for(let i1 = 0; i1 < lastIdentifiers.length; i1++){\\n            const identifier = lastIdentifiers[i1];\\n            const index = getIndexByIdentifier(identifier);\\n            if (stylesInDom[index].references === 0) {\\n                stylesInDom[index].updater();\\n                stylesInDom.splice(index, 1);\\n            }\\n        }\\n        lastIdentifiers = newLastIdentifiers;\\n    };\\n};\\n\\n//# sourceMappingURL=injectStylesIntoStyleTag.js.map//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\\n\"));\n\n/***/ }),\n\n/***/ \"./pages/_app.tsx\":\n/*!************************!*\\\n  !*** ./pages/_app.tsx ***!\n  \\************************/\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(__webpack_require__.ts(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": function() { return /* binding */ App; }\\n/* harmony export */ });\\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \\\"./node_modules/react/jsx-dev-runtime.js\\\");\\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _styles_globals_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/globals.scss */ \\\"./styles/globals.scss\\\");\\n/* harmony import */ var _styles_globals_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_scss__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\nfunction App(param) {\\n    let { Component , pageProps  } = param;\\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\\n        ...pageProps\\n    }, void 0, false, {\\n        fileName: \\\"/Users/hadad/Desktop/melliom/gigs/zatec/ice-and-fire/pages/_app.tsx\\\",\\n        lineNumber: 5,\\n        columnNumber: 10\\n    }, this);\\n}\\n_c = App;\\nvar _c;\\n$RefreshReg$(_c, \\\"App\\\");\\n\\n\\n;\\n    // Wrapped in an IIFE to avoid polluting the global scope\\n    ;\\n    (function () {\\n        var _a, _b;\\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\\n        // to extract CSS. For backwards compatibility, we need to check we're in a\\n        // browser context before continuing.\\n        if (typeof self !== 'undefined' &&\\n            // AMP / No-JS mode does not inject these helpers:\\n            '$RefreshHelpers$' in self) {\\n            // @ts-ignore __webpack_module__ is global\\n            var currentExports = module.exports;\\n            // @ts-ignore __webpack_module__ is global\\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\\n            // This cannot happen in MainTemplate because the exports mismatch between\\n            // templating and execution.\\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\\n            // A module can be accepted automatically based on its exports, e.g. when\\n            // it is a Refresh Boundary.\\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\\n                // Save the previous exports on update so we can compare the boundary\\n                // signatures.\\n                module.hot.dispose(function (data) {\\n                    data.prevExports = currentExports;\\n                });\\n                // Unconditionally accept an update to this module, we'll check if it's\\n                // still a Refresh Boundary later.\\n                // @ts-ignore importMeta is replaced in the loader\\n                module.hot.accept();\\n                // This field is set when the previous version of this module was a\\n                // Refresh Boundary, letting us know we need to check for invalidation or\\n                // enqueue an update.\\n                if (prevExports !== null) {\\n                    // A boundary can become ineligible if its exports are incompatible\\n                    // with the previous exports.\\n                    //\\n                    // For example, if you add/remove/change exports, we'll want to\\n                    // re-execute the importing modules, and force those components to\\n                    // re-render. Similarly, if you convert a class component to a\\n                    // function, we want to invalidate the boundary.\\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\\n                        module.hot.invalidate();\\n                    }\\n                    else {\\n                        self.$RefreshHelpers$.scheduleUpdate();\\n                    }\\n                }\\n            }\\n            else {\\n                // Since we just executed the code for the module, it's possible that the\\n                // new exports made it ineligible for being a boundary.\\n                // We only care about the case when we were _previously_ a boundary,\\n                // because we already accepted this update (accidental side effect).\\n                var isNoLongerABoundary = prevExports !== null;\\n                if (isNoLongerABoundary) {\\n                    module.hot.invalidate();\\n                }\\n            }\\n        }\\n    })();\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQStCO0FBR2hCLFNBQVNBLElBQUksS0FBa0MsRUFBRTtRQUFwQyxFQUFFQyxVQUFTLEVBQUVDLFVBQVMsRUFBWSxHQUFsQztJQUMxQixxQkFBTyw4REFBQ0Q7UUFBVyxHQUFHQyxTQUFTOzs7Ozs7QUFDakMsQ0FBQztLQUZ1QkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvX2FwcC50c3g/MmZiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL3N0eWxlcy9nbG9iYWxzLnNjc3MnXG5pbXBvcnQgdHlwZSB7IEFwcFByb3BzIH0gZnJvbSAnbmV4dC9hcHAnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH06IEFwcFByb3BzKSB7XG4gIHJldHVybiA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XG59XG4iXSwibmFtZXMiOlsiQXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./pages/_app.tsx\\n\"));\n\n/***/ }),\n\n/***/ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\":\n/*!*********************************************************************!*\\\n  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!\n  \\*********************************************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\neval(__webpack_require__.ts(\"/**\\n * @license React\\n * react-jsx-dev-runtime.development.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nif (true) {\\n  (function() {\\n'use strict';\\n\\nvar React = __webpack_require__(/*! react */ \\\"./node_modules/react/index.js\\\");\\n\\n// ATTENTION\\n// When adding new symbols to this file,\\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\\n// The Symbol used to tag the ReactElement-like types.\\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\\nfunction getIteratorFn(maybeIterable) {\\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\\n    return null;\\n  }\\n\\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\\n\\n  if (typeof maybeIterator === 'function') {\\n    return maybeIterator;\\n  }\\n\\n  return null;\\n}\\n\\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\\n\\nfunction error(format) {\\n  {\\n    {\\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\\n        args[_key2 - 1] = arguments[_key2];\\n      }\\n\\n      printWarning('error', format, args);\\n    }\\n  }\\n}\\n\\nfunction printWarning(level, format, args) {\\n  // When changing this logic, you might want to also\\n  // update consoleWithStackDev.www.js as well.\\n  {\\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\\n\\n    if (stack !== '') {\\n      format += '%s';\\n      args = args.concat([stack]);\\n    } // eslint-disable-next-line react-internal/safe-string-coercion\\n\\n\\n    var argsWithFormat = args.map(function (item) {\\n      return String(item);\\n    }); // Careful: RN currently depends on this prefix\\n\\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\\n    // breaks IE9: https://github.com/facebook/react/issues/13610\\n    // eslint-disable-next-line react-internal/no-production-logging\\n\\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\\n  }\\n}\\n\\n// -----------------------------------------------------------------------------\\n\\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\\nvar enableCacheElement = false;\\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\\n\\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\\n// stuff. Intended to enable React core members to more easily debug scheduling\\n// issues in DEV builds.\\n\\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\\n\\nvar REACT_MODULE_REFERENCE;\\n\\n{\\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\\n}\\n\\nfunction isValidElementType(type) {\\n  if (typeof type === 'string' || typeof type === 'function') {\\n    return true;\\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\\n\\n\\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\\n    return true;\\n  }\\n\\n  if (typeof type === 'object' && type !== null) {\\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\\n    // types supported by any Flight configuration anywhere since\\n    // we don't know which Flight build this will end up being used\\n    // with.\\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\\n      return true;\\n    }\\n  }\\n\\n  return false;\\n}\\n\\nfunction getWrappedName(outerType, innerType, wrapperName) {\\n  var displayName = outerType.displayName;\\n\\n  if (displayName) {\\n    return displayName;\\n  }\\n\\n  var functionName = innerType.displayName || innerType.name || '';\\n  return functionName !== '' ? wrapperName + \\\"(\\\" + functionName + \\\")\\\" : wrapperName;\\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\\n\\n\\nfunction getContextName(type) {\\n  return type.displayName || 'Context';\\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\\n\\n\\nfunction getComponentNameFromType(type) {\\n  if (type == null) {\\n    // Host root, text node or just invalid type.\\n    return null;\\n  }\\n\\n  {\\n    if (typeof type.tag === 'number') {\\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\\n    }\\n  }\\n\\n  if (typeof type === 'function') {\\n    return type.displayName || type.name || null;\\n  }\\n\\n  if (typeof type === 'string') {\\n    return type;\\n  }\\n\\n  switch (type) {\\n    case REACT_FRAGMENT_TYPE:\\n      return 'Fragment';\\n\\n    case REACT_PORTAL_TYPE:\\n      return 'Portal';\\n\\n    case REACT_PROFILER_TYPE:\\n      return 'Profiler';\\n\\n    case REACT_STRICT_MODE_TYPE:\\n      return 'StrictMode';\\n\\n    case REACT_SUSPENSE_TYPE:\\n      return 'Suspense';\\n\\n    case REACT_SUSPENSE_LIST_TYPE:\\n      return 'SuspenseList';\\n\\n  }\\n\\n  if (typeof type === 'object') {\\n    switch (type.$$typeof) {\\n      case REACT_CONTEXT_TYPE:\\n        var context = type;\\n        return getContextName(context) + '.Consumer';\\n\\n      case REACT_PROVIDER_TYPE:\\n        var provider = type;\\n        return getContextName(provider._context) + '.Provider';\\n\\n      case REACT_FORWARD_REF_TYPE:\\n        return getWrappedName(type, type.render, 'ForwardRef');\\n\\n      case REACT_MEMO_TYPE:\\n        var outerName = type.displayName || null;\\n\\n        if (outerName !== null) {\\n          return outerName;\\n        }\\n\\n        return getComponentNameFromType(type.type) || 'Memo';\\n\\n      case REACT_LAZY_TYPE:\\n        {\\n          var lazyComponent = type;\\n          var payload = lazyComponent._payload;\\n          var init = lazyComponent._init;\\n\\n          try {\\n            return getComponentNameFromType(init(payload));\\n          } catch (x) {\\n            return null;\\n          }\\n        }\\n\\n      // eslint-disable-next-line no-fallthrough\\n    }\\n  }\\n\\n  return null;\\n}\\n\\nvar assign = Object.assign;\\n\\n// Helpers to patch console.logs to avoid logging during side-effect free\\n// replaying on render function. This currently only patches the object\\n// lazily which won't cover if the log function was extracted eagerly.\\n// We could also eagerly patch the method.\\nvar disabledDepth = 0;\\nvar prevLog;\\nvar prevInfo;\\nvar prevWarn;\\nvar prevError;\\nvar prevGroup;\\nvar prevGroupCollapsed;\\nvar prevGroupEnd;\\n\\nfunction disabledLog() {}\\n\\ndisabledLog.__reactDisabledLog = true;\\nfunction disableLogs() {\\n  {\\n    if (disabledDepth === 0) {\\n      /* eslint-disable react-internal/no-production-logging */\\n      prevLog = console.log;\\n      prevInfo = console.info;\\n      prevWarn = console.warn;\\n      prevError = console.error;\\n      prevGroup = console.group;\\n      prevGroupCollapsed = console.groupCollapsed;\\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\\n\\n      var props = {\\n        configurable: true,\\n        enumerable: true,\\n        value: disabledLog,\\n        writable: true\\n      }; // $FlowFixMe Flow thinks console is immutable.\\n\\n      Object.defineProperties(console, {\\n        info: props,\\n        log: props,\\n        warn: props,\\n        error: props,\\n        group: props,\\n        groupCollapsed: props,\\n        groupEnd: props\\n      });\\n      /* eslint-enable react-internal/no-production-logging */\\n    }\\n\\n    disabledDepth++;\\n  }\\n}\\nfunction reenableLogs() {\\n  {\\n    disabledDepth--;\\n\\n    if (disabledDepth === 0) {\\n      /* eslint-disable react-internal/no-production-logging */\\n      var props = {\\n        configurable: true,\\n        enumerable: true,\\n        writable: true\\n      }; // $FlowFixMe Flow thinks console is immutable.\\n\\n      Object.defineProperties(console, {\\n        log: assign({}, props, {\\n          value: prevLog\\n        }),\\n        info: assign({}, props, {\\n          value: prevInfo\\n        }),\\n        warn: assign({}, props, {\\n          value: prevWarn\\n        }),\\n        error: assign({}, props, {\\n          value: prevError\\n        }),\\n        group: assign({}, props, {\\n          value: prevGroup\\n        }),\\n        groupCollapsed: assign({}, props, {\\n          value: prevGroupCollapsed\\n        }),\\n        groupEnd: assign({}, props, {\\n          value: prevGroupEnd\\n        })\\n      });\\n      /* eslint-enable react-internal/no-production-logging */\\n    }\\n\\n    if (disabledDepth < 0) {\\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\\n    }\\n  }\\n}\\n\\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\\nvar prefix;\\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\\n  {\\n    if (prefix === undefined) {\\n      // Extract the VM specific prefix used by each line.\\n      try {\\n        throw Error();\\n      } catch (x) {\\n        var match = x.stack.trim().match(/\\\\n( *(at )?)/);\\n        prefix = match && match[1] || '';\\n      }\\n    } // We use the prefix to ensure our stacks line up with native stack frames.\\n\\n\\n    return '\\\\n' + prefix + name;\\n  }\\n}\\nvar reentry = false;\\nvar componentFrameCache;\\n\\n{\\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\\n  componentFrameCache = new PossiblyWeakMap();\\n}\\n\\nfunction describeNativeComponentFrame(fn, construct) {\\n  // If something asked for a stack inside a fake render, it should get ignored.\\n  if ( !fn || reentry) {\\n    return '';\\n  }\\n\\n  {\\n    var frame = componentFrameCache.get(fn);\\n\\n    if (frame !== undefined) {\\n      return frame;\\n    }\\n  }\\n\\n  var control;\\n  reentry = true;\\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\\n\\n  Error.prepareStackTrace = undefined;\\n  var previousDispatcher;\\n\\n  {\\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\\n    // for warnings.\\n\\n    ReactCurrentDispatcher.current = null;\\n    disableLogs();\\n  }\\n\\n  try {\\n    // This should throw.\\n    if (construct) {\\n      // Something should be setting the props in the constructor.\\n      var Fake = function () {\\n        throw Error();\\n      }; // $FlowFixMe\\n\\n\\n      Object.defineProperty(Fake.prototype, 'props', {\\n        set: function () {\\n          // We use a throwing setter instead of frozen or non-writable props\\n          // because that won't throw in a non-strict mode function.\\n          throw Error();\\n        }\\n      });\\n\\n      if (typeof Reflect === 'object' && Reflect.construct) {\\n        // We construct a different control for this case to include any extra\\n        // frames added by the construct call.\\n        try {\\n          Reflect.construct(Fake, []);\\n        } catch (x) {\\n          control = x;\\n        }\\n\\n        Reflect.construct(fn, [], Fake);\\n      } else {\\n        try {\\n          Fake.call();\\n        } catch (x) {\\n          control = x;\\n        }\\n\\n        fn.call(Fake.prototype);\\n      }\\n    } else {\\n      try {\\n        throw Error();\\n      } catch (x) {\\n        control = x;\\n      }\\n\\n      fn();\\n    }\\n  } catch (sample) {\\n    // This is inlined manually because closure doesn't do it for us.\\n    if (sample && control && typeof sample.stack === 'string') {\\n      // This extracts the first frame from the sample that isn't also in the control.\\n      // Skipping one frame that we assume is the frame that calls the two.\\n      var sampleLines = sample.stack.split('\\\\n');\\n      var controlLines = control.stack.split('\\\\n');\\n      var s = sampleLines.length - 1;\\n      var c = controlLines.length - 1;\\n\\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\\n        // We expect at least one stack frame to be shared.\\n        // Typically this will be the root most one. However, stack frames may be\\n        // cut off due to maximum stack limits. In this case, one maybe cut off\\n        // earlier than the other. We assume that the sample is longer or the same\\n        // and there for cut off earlier. So we should find the root most frame in\\n        // the sample somewhere in the control.\\n        c--;\\n      }\\n\\n      for (; s >= 1 && c >= 0; s--, c--) {\\n        // Next we find the first one that isn't the same which should be the\\n        // frame that called our sample function and the control.\\n        if (sampleLines[s] !== controlLines[c]) {\\n          // In V8, the first line is describing the message but other VMs don't.\\n          // If we're about to return the first line, and the control is also on the same\\n          // line, that's a pretty good indicator that our sample threw at same line as\\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\\n          // This can happen if you passed a class to function component, or non-function.\\n          if (s !== 1 || c !== 1) {\\n            do {\\n              s--;\\n              c--; // We may still have similar intermediate frames from the construct call.\\n              // The next one that isn't the same should be our match though.\\n\\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\\n                // V8 adds a \\\"new\\\" prefix for native classes. Let's remove it to make it prettier.\\n                var _frame = '\\\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \\\"<anonymous>\\\"\\n                // but we have a user-provided \\\"displayName\\\"\\n                // splice it in to make the stack more readable.\\n\\n\\n                if (fn.displayName && _frame.includes('<anonymous>')) {\\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\\n                }\\n\\n                {\\n                  if (typeof fn === 'function') {\\n                    componentFrameCache.set(fn, _frame);\\n                  }\\n                } // Return the line we found.\\n\\n\\n                return _frame;\\n              }\\n            } while (s >= 1 && c >= 0);\\n          }\\n\\n          break;\\n        }\\n      }\\n    }\\n  } finally {\\n    reentry = false;\\n\\n    {\\n      ReactCurrentDispatcher.current = previousDispatcher;\\n      reenableLogs();\\n    }\\n\\n    Error.prepareStackTrace = previousPrepareStackTrace;\\n  } // Fallback to just using the name if we couldn't make it throw.\\n\\n\\n  var name = fn ? fn.displayName || fn.name : '';\\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\\n\\n  {\\n    if (typeof fn === 'function') {\\n      componentFrameCache.set(fn, syntheticFrame);\\n    }\\n  }\\n\\n  return syntheticFrame;\\n}\\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\\n  {\\n    return describeNativeComponentFrame(fn, false);\\n  }\\n}\\n\\nfunction shouldConstruct(Component) {\\n  var prototype = Component.prototype;\\n  return !!(prototype && prototype.isReactComponent);\\n}\\n\\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\\n\\n  if (type == null) {\\n    return '';\\n  }\\n\\n  if (typeof type === 'function') {\\n    {\\n      return describeNativeComponentFrame(type, shouldConstruct(type));\\n    }\\n  }\\n\\n  if (typeof type === 'string') {\\n    return describeBuiltInComponentFrame(type);\\n  }\\n\\n  switch (type) {\\n    case REACT_SUSPENSE_TYPE:\\n      return describeBuiltInComponentFrame('Suspense');\\n\\n    case REACT_SUSPENSE_LIST_TYPE:\\n      return describeBuiltInComponentFrame('SuspenseList');\\n  }\\n\\n  if (typeof type === 'object') {\\n    switch (type.$$typeof) {\\n      case REACT_FORWARD_REF_TYPE:\\n        return describeFunctionComponentFrame(type.render);\\n\\n      case REACT_MEMO_TYPE:\\n        // Memo may contain any component type so we recursively resolve it.\\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\\n\\n      case REACT_LAZY_TYPE:\\n        {\\n          var lazyComponent = type;\\n          var payload = lazyComponent._payload;\\n          var init = lazyComponent._init;\\n\\n          try {\\n            // Lazy may contain any component type so we recursively resolve it.\\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\\n          } catch (x) {}\\n        }\\n    }\\n  }\\n\\n  return '';\\n}\\n\\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\\n\\nvar loggedTypeFailures = {};\\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\\n\\nfunction setCurrentlyValidatingElement(element) {\\n  {\\n    if (element) {\\n      var owner = element._owner;\\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\\n    } else {\\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\\n    }\\n  }\\n}\\n\\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\\n  {\\n    // $FlowFixMe This is okay but Flow doesn't know it.\\n    var has = Function.call.bind(hasOwnProperty);\\n\\n    for (var typeSpecName in typeSpecs) {\\n      if (has(typeSpecs, typeSpecName)) {\\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\\n        // fail the render phase where it didn't fail before. So we log it.\\n        // After these have been cleaned up, we'll let them throw.\\n\\n        try {\\n          // This is intentionally an invariant that gets caught. It's the same\\n          // behavior as without this statement except with a better message.\\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\\n            // eslint-disable-next-line react-internal/prod-error-codes\\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\\n            err.name = 'Invariant Violation';\\n            throw err;\\n          }\\n\\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\\n        } catch (ex) {\\n          error$1 = ex;\\n        }\\n\\n        if (error$1 && !(error$1 instanceof Error)) {\\n          setCurrentlyValidatingElement(element);\\n\\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\\n\\n          setCurrentlyValidatingElement(null);\\n        }\\n\\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\\n          // Only monitor this failure once because there tends to be a lot of the\\n          // same error.\\n          loggedTypeFailures[error$1.message] = true;\\n          setCurrentlyValidatingElement(element);\\n\\n          error('Failed %s type: %s', location, error$1.message);\\n\\n          setCurrentlyValidatingElement(null);\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\\n\\nfunction isArray(a) {\\n  return isArrayImpl(a);\\n}\\n\\n/*\\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\\n *\\n * The functions in this module will throw an easier-to-understand,\\n * easier-to-debug exception with a clear errors message message explaining the\\n * problem. (Instead of a confusing exception thrown inside the implementation\\n * of the `value` object).\\n */\\n// $FlowFixMe only called in DEV, so void return is not possible.\\nfunction typeName(value) {\\n  {\\n    // toStringTag is needed for namespaced types like Temporal.Instant\\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\\n    return type;\\n  }\\n} // $FlowFixMe only called in DEV, so void return is not possible.\\n\\n\\nfunction willCoercionThrow(value) {\\n  {\\n    try {\\n      testStringCoercion(value);\\n      return false;\\n    } catch (e) {\\n      return true;\\n    }\\n  }\\n}\\n\\nfunction testStringCoercion(value) {\\n  // If you ended up here by following an exception call stack, here's what's\\n  // happened: you supplied an object or symbol value to React (as a prop, key,\\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\\n  // coerce it to a string using `'' + value`, an exception was thrown.\\n  //\\n  // The most common types that will cause this exception are `Symbol` instances\\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\\n  // exception. (Library authors do this to prevent users from using built-in\\n  // numeric operators like `+` or comparison operators like `>=` because custom\\n  // methods are needed to perform accurate arithmetic or comparison.)\\n  //\\n  // To fix the problem, coerce this object or symbol value to a string before\\n  // passing it to React. The most reliable way is usually `String(value)`.\\n  //\\n  // To find which value is throwing, check the browser or debugger console.\\n  // Before this exception was thrown, there should be `console.error` output\\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\\n  // problem and how that type was used: key, atrribute, input value prop, etc.\\n  // In most cases, this console output also shows the component and its\\n  // ancestor components where the exception happened.\\n  //\\n  // eslint-disable-next-line react-internal/safe-string-coercion\\n  return '' + value;\\n}\\nfunction checkKeyStringCoercion(value) {\\n  {\\n    if (willCoercionThrow(value)) {\\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\\n\\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\\n    }\\n  }\\n}\\n\\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\\nvar RESERVED_PROPS = {\\n  key: true,\\n  ref: true,\\n  __self: true,\\n  __source: true\\n};\\nvar specialPropKeyWarningShown;\\nvar specialPropRefWarningShown;\\nvar didWarnAboutStringRefs;\\n\\n{\\n  didWarnAboutStringRefs = {};\\n}\\n\\nfunction hasValidRef(config) {\\n  {\\n    if (hasOwnProperty.call(config, 'ref')) {\\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\\n\\n      if (getter && getter.isReactWarning) {\\n        return false;\\n      }\\n    }\\n  }\\n\\n  return config.ref !== undefined;\\n}\\n\\nfunction hasValidKey(config) {\\n  {\\n    if (hasOwnProperty.call(config, 'key')) {\\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\\n\\n      if (getter && getter.isReactWarning) {\\n        return false;\\n      }\\n    }\\n  }\\n\\n  return config.key !== undefined;\\n}\\n\\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\\n  {\\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\\n\\n      if (!didWarnAboutStringRefs[componentName]) {\\n        error('Component \\\"%s\\\" contains the string ref \\\"%s\\\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\\n\\n        didWarnAboutStringRefs[componentName] = true;\\n      }\\n    }\\n  }\\n}\\n\\nfunction defineKeyPropWarningGetter(props, displayName) {\\n  {\\n    var warnAboutAccessingKey = function () {\\n      if (!specialPropKeyWarningShown) {\\n        specialPropKeyWarningShown = true;\\n\\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\\n      }\\n    };\\n\\n    warnAboutAccessingKey.isReactWarning = true;\\n    Object.defineProperty(props, 'key', {\\n      get: warnAboutAccessingKey,\\n      configurable: true\\n    });\\n  }\\n}\\n\\nfunction defineRefPropWarningGetter(props, displayName) {\\n  {\\n    var warnAboutAccessingRef = function () {\\n      if (!specialPropRefWarningShown) {\\n        specialPropRefWarningShown = true;\\n\\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\\n      }\\n    };\\n\\n    warnAboutAccessingRef.isReactWarning = true;\\n    Object.defineProperty(props, 'ref', {\\n      get: warnAboutAccessingRef,\\n      configurable: true\\n    });\\n  }\\n}\\n/**\\n * Factory method to create a new React element. This no longer adheres to\\n * the class pattern, so do not use new to call it. Also, instanceof check\\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\\n * if something is a React Element.\\n *\\n * @param {*} type\\n * @param {*} props\\n * @param {*} key\\n * @param {string|object} ref\\n * @param {*} owner\\n * @param {*} self A *temporary* helper to detect places where `this` is\\n * different from the `owner` when React.createElement is called, so that we\\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\\n * functions, and as long as `this` and owner are the same, there will be no\\n * change in behavior.\\n * @param {*} source An annotation object (added by a transpiler or otherwise)\\n * indicating filename, line number, and/or other information.\\n * @internal\\n */\\n\\n\\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\\n  var element = {\\n    // This tag allows us to uniquely identify this as a React Element\\n    $$typeof: REACT_ELEMENT_TYPE,\\n    // Built-in properties that belong on the element\\n    type: type,\\n    key: key,\\n    ref: ref,\\n    props: props,\\n    // Record the component responsible for creating this element.\\n    _owner: owner\\n  };\\n\\n  {\\n    // The validation flag is currently mutative. We put it on\\n    // an external backing store so that we can freeze the whole object.\\n    // This can be replaced with a WeakMap once they are implemented in\\n    // commonly used development environments.\\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\\n    // the validation flag non-enumerable (where possible, which should\\n    // include every environment we run tests in), so the test framework\\n    // ignores it.\\n\\n    Object.defineProperty(element._store, 'validated', {\\n      configurable: false,\\n      enumerable: false,\\n      writable: true,\\n      value: false\\n    }); // self and source are DEV only properties.\\n\\n    Object.defineProperty(element, '_self', {\\n      configurable: false,\\n      enumerable: false,\\n      writable: false,\\n      value: self\\n    }); // Two elements created in two different places should be considered\\n    // equal for testing purposes and therefore we hide it from enumeration.\\n\\n    Object.defineProperty(element, '_source', {\\n      configurable: false,\\n      enumerable: false,\\n      writable: false,\\n      value: source\\n    });\\n\\n    if (Object.freeze) {\\n      Object.freeze(element.props);\\n      Object.freeze(element);\\n    }\\n  }\\n\\n  return element;\\n};\\n/**\\n * https://github.com/reactjs/rfcs/pull/107\\n * @param {*} type\\n * @param {object} props\\n * @param {string} key\\n */\\n\\nfunction jsxDEV(type, config, maybeKey, source, self) {\\n  {\\n    var propName; // Reserved names are extracted\\n\\n    var props = {};\\n    var key = null;\\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\\n    // issue if key is also explicitly declared (ie. <div {...props} key=\\\"Hi\\\" />\\n    // or <div key=\\\"Hi\\\" {...props} /> ). We want to deprecate key spread,\\n    // but as an intermediary step, we will use jsxDEV for everything except\\n    // <div {...props} key=\\\"Hi\\\" />, because we aren't currently able to tell if\\n    // key is explicitly declared to be undefined or not.\\n\\n    if (maybeKey !== undefined) {\\n      {\\n        checkKeyStringCoercion(maybeKey);\\n      }\\n\\n      key = '' + maybeKey;\\n    }\\n\\n    if (hasValidKey(config)) {\\n      {\\n        checkKeyStringCoercion(config.key);\\n      }\\n\\n      key = '' + config.key;\\n    }\\n\\n    if (hasValidRef(config)) {\\n      ref = config.ref;\\n      warnIfStringRefCannotBeAutoConverted(config, self);\\n    } // Remaining properties are added to a new props object\\n\\n\\n    for (propName in config) {\\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\\n        props[propName] = config[propName];\\n      }\\n    } // Resolve default props\\n\\n\\n    if (type && type.defaultProps) {\\n      var defaultProps = type.defaultProps;\\n\\n      for (propName in defaultProps) {\\n        if (props[propName] === undefined) {\\n          props[propName] = defaultProps[propName];\\n        }\\n      }\\n    }\\n\\n    if (key || ref) {\\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\\n\\n      if (key) {\\n        defineKeyPropWarningGetter(props, displayName);\\n      }\\n\\n      if (ref) {\\n        defineRefPropWarningGetter(props, displayName);\\n      }\\n    }\\n\\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\\n  }\\n}\\n\\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\\n\\nfunction setCurrentlyValidatingElement$1(element) {\\n  {\\n    if (element) {\\n      var owner = element._owner;\\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\\n    } else {\\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\\n    }\\n  }\\n}\\n\\nvar propTypesMisspellWarningShown;\\n\\n{\\n  propTypesMisspellWarningShown = false;\\n}\\n/**\\n * Verifies the object is a ReactElement.\\n * See https://reactjs.org/docs/react-api.html#isvalidelement\\n * @param {?object} object\\n * @return {boolean} True if `object` is a ReactElement.\\n * @final\\n */\\n\\n\\nfunction isValidElement(object) {\\n  {\\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\\n  }\\n}\\n\\nfunction getDeclarationErrorAddendum() {\\n  {\\n    if (ReactCurrentOwner$1.current) {\\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\\n\\n      if (name) {\\n        return '\\\\n\\\\nCheck the render method of `' + name + '`.';\\n      }\\n    }\\n\\n    return '';\\n  }\\n}\\n\\nfunction getSourceInfoErrorAddendum(source) {\\n  {\\n    if (source !== undefined) {\\n      var fileName = source.fileName.replace(/^.*[\\\\\\\\\\\\/]/, '');\\n      var lineNumber = source.lineNumber;\\n      return '\\\\n\\\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\\n    }\\n\\n    return '';\\n  }\\n}\\n/**\\n * Warn if there's no key explicitly set on dynamic arrays of children or\\n * object keys are not valid. This allows us to keep track of children between\\n * updates.\\n */\\n\\n\\nvar ownerHasKeyUseWarning = {};\\n\\nfunction getCurrentComponentErrorInfo(parentType) {\\n  {\\n    var info = getDeclarationErrorAddendum();\\n\\n    if (!info) {\\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\\n\\n      if (parentName) {\\n        info = \\\"\\\\n\\\\nCheck the top-level render call using <\\\" + parentName + \\\">.\\\";\\n      }\\n    }\\n\\n    return info;\\n  }\\n}\\n/**\\n * Warn if the element doesn't have an explicit key assigned to it.\\n * This element is in an array. The array could grow and shrink or be\\n * reordered. All children that haven't already been validated are required to\\n * have a \\\"key\\\" property assigned to it. Error statuses are cached so a warning\\n * will only be shown once.\\n *\\n * @internal\\n * @param {ReactElement} element Element that requires a key.\\n * @param {*} parentType element's parent's type.\\n */\\n\\n\\nfunction validateExplicitKey(element, parentType) {\\n  {\\n    if (!element._store || element._store.validated || element.key != null) {\\n      return;\\n    }\\n\\n    element._store.validated = true;\\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\\n\\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\\n      return;\\n    }\\n\\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\\n    // property, it may be the creator of the child that's responsible for\\n    // assigning it a key.\\n\\n    var childOwner = '';\\n\\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\\n      // Give the component that originally created this child.\\n      childOwner = \\\" It was passed a child from \\\" + getComponentNameFromType(element._owner.type) + \\\".\\\";\\n    }\\n\\n    setCurrentlyValidatingElement$1(element);\\n\\n    error('Each child in a list should have a unique \\\"key\\\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\\n\\n    setCurrentlyValidatingElement$1(null);\\n  }\\n}\\n/**\\n * Ensure that every element either is passed in a static location, in an\\n * array with an explicit keys property defined, or in an object literal\\n * with valid key property.\\n *\\n * @internal\\n * @param {ReactNode} node Statically passed child of any type.\\n * @param {*} parentType node's parent's type.\\n */\\n\\n\\nfunction validateChildKeys(node, parentType) {\\n  {\\n    if (typeof node !== 'object') {\\n      return;\\n    }\\n\\n    if (isArray(node)) {\\n      for (var i = 0; i < node.length; i++) {\\n        var child = node[i];\\n\\n        if (isValidElement(child)) {\\n          validateExplicitKey(child, parentType);\\n        }\\n      }\\n    } else if (isValidElement(node)) {\\n      // This element was passed in a valid location.\\n      if (node._store) {\\n        node._store.validated = true;\\n      }\\n    } else if (node) {\\n      var iteratorFn = getIteratorFn(node);\\n\\n      if (typeof iteratorFn === 'function') {\\n        // Entry iterators used to provide implicit keys,\\n        // but now we print a separate warning for them later.\\n        if (iteratorFn !== node.entries) {\\n          var iterator = iteratorFn.call(node);\\n          var step;\\n\\n          while (!(step = iterator.next()).done) {\\n            if (isValidElement(step.value)) {\\n              validateExplicitKey(step.value, parentType);\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n/**\\n * Given an element, validate that its props follow the propTypes definition,\\n * provided by the type.\\n *\\n * @param {ReactElement} element\\n */\\n\\n\\nfunction validatePropTypes(element) {\\n  {\\n    var type = element.type;\\n\\n    if (type === null || type === undefined || typeof type === 'string') {\\n      return;\\n    }\\n\\n    var propTypes;\\n\\n    if (typeof type === 'function') {\\n      propTypes = type.propTypes;\\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\\n    // Inner props are checked in the reconciler.\\n    type.$$typeof === REACT_MEMO_TYPE)) {\\n      propTypes = type.propTypes;\\n    } else {\\n      return;\\n    }\\n\\n    if (propTypes) {\\n      // Intentionally inside to avoid triggering lazy initializers:\\n      var name = getComponentNameFromType(type);\\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\\n\\n      var _name = getComponentNameFromType(type);\\n\\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\\n    }\\n\\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\\n    }\\n  }\\n}\\n/**\\n * Given a fragment, validate that it can only be provided with fragment props\\n * @param {ReactElement} fragment\\n */\\n\\n\\nfunction validateFragmentProps(fragment) {\\n  {\\n    var keys = Object.keys(fragment.props);\\n\\n    for (var i = 0; i < keys.length; i++) {\\n      var key = keys[i];\\n\\n      if (key !== 'children' && key !== 'key') {\\n        setCurrentlyValidatingElement$1(fragment);\\n\\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\\n\\n        setCurrentlyValidatingElement$1(null);\\n        break;\\n      }\\n    }\\n\\n    if (fragment.ref !== null) {\\n      setCurrentlyValidatingElement$1(fragment);\\n\\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\\n\\n      setCurrentlyValidatingElement$1(null);\\n    }\\n  }\\n}\\n\\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\\n  {\\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\\n    // succeed and there will likely be errors in render.\\n\\n    if (!validType) {\\n      var info = '';\\n\\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\\n        info += ' You likely forgot to export your component from the file ' + \\\"it's defined in, or you might have mixed up default and named imports.\\\";\\n      }\\n\\n      var sourceInfo = getSourceInfoErrorAddendum(source);\\n\\n      if (sourceInfo) {\\n        info += sourceInfo;\\n      } else {\\n        info += getDeclarationErrorAddendum();\\n      }\\n\\n      var typeString;\\n\\n      if (type === null) {\\n        typeString = 'null';\\n      } else if (isArray(type)) {\\n        typeString = 'array';\\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\\n        typeString = \\\"<\\\" + (getComponentNameFromType(type.type) || 'Unknown') + \\\" />\\\";\\n        info = ' Did you accidentally export a JSX literal instead of a component?';\\n      } else {\\n        typeString = typeof type;\\n      }\\n\\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\\n    }\\n\\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\\n    // TODO: Drop this when these are no longer allowed as the type argument.\\n\\n    if (element == null) {\\n      return element;\\n    } // Skip key warning if the type isn't valid since our key validation logic\\n    // doesn't expect a non-string/function type and can throw confusing errors.\\n    // We don't want exception behavior to differ between dev and prod.\\n    // (Rendering will throw with a helpful message and as soon as the type is\\n    // fixed, the key warnings will appear.)\\n\\n\\n    if (validType) {\\n      var children = props.children;\\n\\n      if (children !== undefined) {\\n        if (isStaticChildren) {\\n          if (isArray(children)) {\\n            for (var i = 0; i < children.length; i++) {\\n              validateChildKeys(children[i], type);\\n            }\\n\\n            if (Object.freeze) {\\n              Object.freeze(children);\\n            }\\n          } else {\\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\\n          }\\n        } else {\\n          validateChildKeys(children, type);\\n        }\\n      }\\n    }\\n\\n    if (type === REACT_FRAGMENT_TYPE) {\\n      validateFragmentProps(element);\\n    } else {\\n      validatePropTypes(element);\\n    }\\n\\n    return element;\\n  }\\n} // These two functions exist to still get child warnings in dev\\n\\nvar jsxDEV$1 =  jsxWithValidation ;\\n\\nexports.Fragment = REACT_FRAGMENT_TYPE;\\nexports.jsxDEV = jsxDEV$1;\\n  })();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\\n\"));\n\n/***/ }),\n\n/***/ \"./node_modules/react/jsx-dev-runtime.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/react/jsx-dev-runtime.js ***!\n  \\***********************************************/\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\n\"use strict\";\neval(__webpack_require__.ts(\"\\n\\nif (false) {} else {\\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \\\"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\\\");\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81Nzc3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\\n\"));\n\n/***/ })\n\n},\n/******/ function(__webpack_require__) { // webpackRuntimeModules\n/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }\n/******/ __webpack_require__.O(0, [\"main\"], function() { return __webpack_exec__(\"./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\"), __webpack_exec__(\"./node_modules/next/dist/client/router.js\"); });\n/******/ var __webpack_exports__ = __webpack_require__.O();\n/******/ _N_E = __webpack_exports__;\n/******/ }\n]);"],
      mappingseY;IAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAfZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAACA,IAAI,CAAC,kBAAkB,CAAC,GAAG,6BAAAA,IAAI,CAAC,kBAAkB,CAAC,kCAAI,EAAE,GAAEC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,EAAC;EAEjF,KAAM,icAAic;EACvc;AACA;AACA;EACA;EAAO,UAASC,MAAM,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAE;IAElE,YAAY;;IAAC;IAAA;IACbC,IAAI,CAACD,mBAAmB,CAACE,EAAE,CAAC,kiMAAkiM,CAAC,CAAC;;IAEhkM;EAAM,CAAE;;EAER,KAAM,8EAA8E;EACpF;AACA;AACA;EACA;EAAO,UAASJ,MAAM,EAAEK,wBAAwB,EAAEH,mBAAmB,EAAE;IAEvE,YAAY;;IAAC;IAAA;IACbC,IAAI,CAACD,mBAAmB,CAACE,EAAE,CAAC,stQAAstQ,CAAC,CAAC;;IAEpvQ;EAAM,CAAE;;EAER,KAAM,qIAAqI;EAC3I;AACA;AACA;EACA;EAAO,UAASJ,MAAM,EAAEK,wBAAwB,EAAEH,mBAAmB,EAAE;IAAA;IAAA;IAEvEC,IAAI,CAACD,mBAAmB,CAACE,EAAE,CAAC,q7CAAq7C,CAAC,CAAC;;IAEn9C;EAAM,CAAE;;EAER,KAAM,uBAAuB;EAC7B;AACA;AACA;EACA;EAAO,UAASJ,MAAM,EAAEK,wBAAwB,EAAEH,mBAAmB,EAAE;IAAA;IAAA;IAEvEC,IAAI,CAACD,mBAAmB,CAACE,EAAE,CAAC,k5XAAk5X,CAAC,CAAC;;IAEh7X;EAAM,CAAE;;EAER,KAAM,sGAAsG;EAC5G;AACA;AACA;EACA;EAAO,UAASJ,MAAM,EAAEK,wBAAwB,EAAEH,mBAAmB,EAAE;IAEvE,YAAY;;IAAC;IAAA;IACbC,IAAI,CAACD,mBAAmB,CAACE,EAAE,CAAC,qyoBAAqyoB,CAAC,CAAC;;IAEn0oB;EAAM,CAAE;;EAER,KAAM,kBAAkB;EACxB;AACA;AACA;EACA;EAAO,UAASJ,MAAM,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAE;IAElE,YAAY;;IAAC;IAAA;IACbC,IAAI,CAACD,mBAAmB,CAACE,EAAE,CAAC,s6KAAs6K,CAAC,CAAC;;IAEp8K;EAAM,CAAE;;EAER,KAAM,+DAA+D;EACrE;AACA;AACA;EACA;EAAO,UAASE,uBAAuB,EAAEC,OAAO,EAAEL,mBAAmB,EAAE;IAEvE,YAAY;;IAAC;IAAA;IACbC,IAAI,CAACD,mBAAmB,CAACE,EAAE,CAAC,yszGAAyszG,CAAC,CAAC;;IAEvuzG;EAAM,CAAE;;EAER,KAAM,yCAAyC;EAC/C;AACA;AACA;EACA;EAAO,UAASJ,MAAM,EAAEK,wBAAwB,EAAEH,mBAAmB,EAAE;IAEvE,YAAY;;IAAC;IAAA;IACbC,IAAI,CAACD,mBAAmB,CAACE,EAAE,CAAC,k/BAAk/B,CAAC,CAAC;;IAEhhC;EAAM;AAEN,CAAC,EACD,QAAS,UAASF,mBAAmB,EAAE;EAAA;EAAA;EAAE;EACzC;EAAS,IAAIM,gBAAgB,GAAG,UAASC,QAAQ,EAAE;IAAA;IAAA;IAAE,OAAOP,mBAAmB,CAACA,mBAAmB,CAACQ,CAAC,GAAGD,QAAQ,CAAC;EAAE,CAAC;EACpH;EAAA;EAASP,mBAAmB,CAACS,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,YAAW;IAAA;IAAA;IAAE,OAAOH,gBAAgB,CAAC,qIAAqI,CAAC,EAAEA,gBAAgB,CAAC,2CAA2C,CAAC;EAAE,CAAC,CAAC;EAC1R;EAAS,IAAIP,mBAAmB,8BAAGC,mBAAmB,CAACS,CAAC,EAAE;EAC1D;EAAA;EAASC,IAAI,GAAGX,mBAAmB;EACnC;AAAS,CAAC,CACT,CAAC"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cafed5deda8d66d640299b4a61029d4865240725"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7dniywjhg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7dniywjhg();
function cov_2075eb4ms5() {
  cov_7dniywjhg().f[0]++;
  var path = (cov_7dniywjhg().s[0]++, "/Users/hadad/Desktop/melliom/gigs/zatec/ice-and-fire/.next/static/chunks/pages/_app.js");
  var hash = (cov_7dniywjhg().s[1]++, "7c252dd77bceef2bc848b60d251cd3013c863539");
  var global = (cov_7dniywjhg().s[2]++, new Function("return this")());
  var gcv = (cov_7dniywjhg().s[3]++, "__coverage__");
  var coverageData = (cov_7dniywjhg().s[4]++, {
    path: "/Users/hadad/Desktop/melliom/gigs/zatec/ice-and-fire/.next/static/chunks/pages/_app.js",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 104,
          column: 3
        }
      },
      "1": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 6209
        }
      },
      "2": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 8437
        }
      },
      "3": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 1492
        }
      },
      "4": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 49,
          column: 12209
        }
      },
      "5": {
        start: {
          line: 60,
          column: 0
        },
        end: {
          line: 60,
          column: 20804
        }
      },
      "6": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 5573
        }
      },
      "7": {
        start: {
          line: 82,
          column: 0
        },
        end: {
          line: 82,
          column: 108264
        }
      },
      "8": {
        start: {
          line: 93,
          column: 0
        },
        end: {
          line: 93,
          column: 1041
        }
      },
      "9": {
        start: {
          line: 99,
          column: 32
        },
        end: {
          line: 99,
          column: 116
        }
      },
      "10": {
        start: {
          line: 99,
          column: 53
        },
        end: {
          line: 99,
          column: 114
        }
      },
      "11": {
        start: {
          line: 100,
          column: 9
        },
        end: {
          line: 100,
          column: 283
        }
      },
      "12": {
        start: {
          line: 100,
          column: 57
        },
        end: {
          line: 100,
          column: 279
        }
      },
      "13": {
        start: {
          line: 101,
          column: 35
        },
        end: {
          line: 101,
          column: 58
        }
      },
      "14": {
        start: {
          line: 102,
          column: 9
        },
        end: {
          line: 102,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 7
          },
          end: {
            line: 15,
            column: 8
          }
        },
        loc: {
          start: {
            line: 15,
            column: 66
          },
          end: {
            line: 20,
            column: 7
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 7
          },
          end: {
            line: 26,
            column: 8
          }
        },
        loc: {
          start: {
            line: 26,
            column: 71
          },
          end: {
            line: 31,
            column: 7
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 7
          },
          end: {
            line: 37,
            column: 8
          }
        },
        loc: {
          start: {
            line: 37,
            column: 71
          },
          end: {
            line: 41,
            column: 7
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 47,
            column: 7
          },
          end: {
            line: 47,
            column: 8
          }
        },
        loc: {
          start: {
            line: 47,
            column: 71
          },
          end: {
            line: 51,
            column: 7
          }
        },
        line: 47
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 57,
            column: 7
          },
          end: {
            line: 57,
            column: 8
          }
        },
        loc: {
          start: {
            line: 57,
            column: 71
          },
          end: {
            line: 62,
            column: 7
          }
        },
        line: 57
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 68,
            column: 7
          },
          end: {
            line: 68,
            column: 8
          }
        },
        loc: {
          start: {
            line: 68,
            column: 66
          },
          end: {
            line: 73,
            column: 7
          }
        },
        line: 68
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 7
          },
          end: {
            line: 79,
            column: 8
          }
        },
        loc: {
          start: {
            line: 79,
            column: 71
          },
          end: {
            line: 84,
            column: 7
          }
        },
        line: 79
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 90,
            column: 7
          },
          end: {
            line: 90,
            column: 8
          }
        },
        loc: {
          start: {
            line: 90,
            column: 71
          },
          end: {
            line: 95,
            column: 7
          }
        },
        line: 90
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 98,
            column: 9
          },
          end: {
            line: 98,
            column: 10
          }
        },
        loc: {
          start: {
            line: 98,
            column: 39
          },
          end: {
            line: 103,
            column: 10
          }
        },
        line: 98
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 99,
            column: 32
          },
          end: {
            line: 99,
            column: 33
          }
        },
        loc: {
          start: {
            line: 99,
            column: 51
          },
          end: {
            line: 99,
            column: 116
          }
        },
        line: 99
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 100,
            column: 44
          },
          end: {
            line: 100,
            column: 45
          }
        },
        loc: {
          start: {
            line: 100,
            column: 55
          },
          end: {
            line: 100,
            column: 281
          }
        },
        line: 100
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 9,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 9,
            column: 52
          }
        }, {
          start: {
            line: 9,
            column: 56
          },
          end: {
            line: 9,
            column: 58
          }
        }],
        line: 9
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7c252dd77bceef2bc848b60d251cd3013c863539"
  });
  var coverage = (cov_7dniywjhg().s[5]++, (cov_7dniywjhg().b[0][0]++, global[gcv]) || (cov_7dniywjhg().b[0][1]++, global[gcv] = {}));
  cov_7dniywjhg().s[6]++;
  if ((cov_7dniywjhg().b[2][0]++, !coverage[path]) || (cov_7dniywjhg().b[2][1]++, coverage[path].hash !== hash)) {
    cov_7dniywjhg().b[1][0]++;
    cov_7dniywjhg().s[7]++;
    coverage[path] = coverageData;
  } else {
    cov_7dniywjhg().b[1][1]++;
  }
  var actualCoverage = (cov_7dniywjhg().s[8]++, coverage[path]);
  {
    cov_7dniywjhg().s[9]++;
    // @ts-ignore
    cov_2075eb4ms5 = function () {
      cov_7dniywjhg().f[1]++;
      cov_7dniywjhg().s[10]++;
      return actualCoverage;
    };
  }
  cov_7dniywjhg().s[11]++;
  return actualCoverage;
}
cov_7dniywjhg().s[12]++;
cov_2075eb4ms5();
cov_7dniywjhg().s[13]++;
cov_2075eb4ms5().s[0]++;
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
cov_7dniywjhg().s[14]++;
(self["webpackChunk_N_E"] = (cov_7dniywjhg().b[3][0]++, (cov_2075eb4ms5().b[0][0]++, self["webpackChunk_N_E"])) || (cov_7dniywjhg().b[3][1]++, (cov_2075eb4ms5().b[0][1]++, []))).push([["pages/_app"], {
  /***/"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss":
  /*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
    !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss ***!
    \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    cov_7dniywjhg().f[2]++;
    cov_7dniywjhg().s[15]++;
    cov_2075eb4ms5().f[0]++;
    cov_7dniywjhg().s[16]++;
    cov_2075eb4ms5().s[1]++;
    cov_7dniywjhg().s[17]++;
    eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"html,\\nbody {\\n  padding: 0;\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\\n}\\n\\na {\\n  color: inherit;\\n  text-decoration: none;\\n}\\n\\n* {\\n  box-sizing: border-box;\\n}\\n\\n@media (prefers-color-scheme: dark) {\\n  html {\\n    color-scheme: dark;\\n  }\\n  body {\\n    color: white;\\n    background: black;\\n  }\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://styles/globals.scss\"],\"names\":[],\"mappings\":\"AAAA;;EAEE,UAAA;EACA,SAAA;EACA,8IAAA;AACF;;AAGA;EACE,cAAA;EACA,qBAAA;AAAF;;AAGA;EACE,sBAAA;AAAF;;AAGA;EACE;IACE,kBAAA;EAAF;EAEA;IACE,YAAA;IACA,iBAAA;EAAF;AACF\",\"sourcesContent\":[\"html,\\nbody {\\n  padding: 0;\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\\n}\\n\\na {\\n  color: inherit;\\n  text-decoration: none;\\n}\\n\\n* {\\n  box-sizing: border-box;\\n}\\n\\n@media (prefers-color-scheme: dark) {\\n  html {\\n    color-scheme: dark;\\n  }\\n  body {\\n    color: white;\\n    background: black;\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzFdIS4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbMl0hLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVszXSEuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvc2Fzcy1sb2FkZXIvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbNF0hLi9zdHlsZXMvZ2xvYmFscy5zY3NzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ3dIO0FBQ3hILDhCQUE4QixrSEFBMkI7QUFDekQ7QUFDQSx1REFBdUQsZUFBZSxjQUFjLG1KQUFtSixHQUFHLE9BQU8sbUJBQW1CLDBCQUEwQixHQUFHLE9BQU8sMkJBQTJCLEdBQUcseUNBQXlDLFVBQVUseUJBQXlCLEtBQUssVUFBVSxtQkFBbUIsd0JBQXdCLEtBQUssR0FBRyxPQUFPLHFGQUFxRixVQUFVLFVBQVUsV0FBVyxNQUFNLEtBQUssVUFBVSxXQUFXLE1BQU0sS0FBSyxXQUFXLE1BQU0sS0FBSyxLQUFLLFdBQVcsS0FBSyxLQUFLLFVBQVUsV0FBVyxLQUFLLHNDQUFzQyxlQUFlLGNBQWMsd0pBQXdKLEdBQUcsT0FBTyxtQkFBbUIsMEJBQTBCLEdBQUcsT0FBTywyQkFBMkIsR0FBRyx5Q0FBeUMsVUFBVSx5QkFBeUIsS0FBSyxVQUFVLG1CQUFtQix3QkFBd0IsS0FBSyxHQUFHLHFCQUFxQjtBQUNqcUM7QUFDQSwrREFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvZ2xvYmFscy5zY3NzPzdhYjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsXFxuYm9keSB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgU2Vnb2UgVUksIFJvYm90bywgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgRmlyYSBTYW5zLCBEcm9pZCBTYW5zLCBIZWx2ZXRpY2EgTmV1ZSwgc2Fucy1zZXJpZjtcXG59XFxuXFxuYSB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxuICBodG1sIHtcXG4gICAgY29sb3Itc2NoZW1lOiBkYXJrO1xcbiAgfVxcbiAgYm9keSB7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgYmFja2dyb3VuZDogYmxhY2s7XFxuICB9XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zdHlsZXMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztFQUVFLFVBQUE7RUFDQSxTQUFBO0VBQ0EsOElBQUE7QUFDRjs7QUFHQTtFQUNFLGNBQUE7RUFDQSxxQkFBQTtBQUFGOztBQUdBO0VBQ0Usc0JBQUE7QUFBRjs7QUFHQTtFQUNFO0lBQ0Usa0JBQUE7RUFBRjtFQUVBO0lBQ0UsWUFBQTtJQUNBLGlCQUFBO0VBQUY7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sLFxcbmJvZHkge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFNlZ29lIFVJLCBSb2JvdG8sIE94eWdlbixcXG4gICAgVWJ1bnR1LCBDYW50YXJlbGwsIEZpcmEgU2FucywgRHJvaWQgU2FucywgSGVsdmV0aWNhIE5ldWUsIHNhbnMtc2VyaWY7XFxufVxcblxcbmEge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbioge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xcbiAgaHRtbCB7XFxuICAgIGNvbG9yLXNjaGVtZTogZGFyaztcXG4gIH1cXG4gIGJvZHkge1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGJhY2tncm91bmQ6IGJsYWNrO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\n"));

    /***/
  },

  /***/"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js":
  /*!************************************************************************************!*\
    !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js ***!
    \************************************************************************************/
  /***/
  function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";

    cov_7dniywjhg().f[3]++;
    cov_7dniywjhg().s[18]++;
    cov_2075eb4ms5().f[1]++;
    cov_7dniywjhg().s[19]++;
    cov_2075eb4ms5().s[2]++;
    cov_7dniywjhg().s[20]++;
    eval(__webpack_require__.ts("\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/ // css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function(useSourceMap) {\n    var list = [] // return the list of modules as css string\n    ;\n    list.toString = function toString() {\n        return this.map(function(item) {\n            var content = cssWithMappingToString(item, useSourceMap);\n            if (item[2]) {\n                return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n            }\n            return content;\n        }).join(\"\");\n    } // import a list of modules into the list\n    ;\n    // eslint-disable-next-line func-names\n    list.i = function(modules, mediaQuery, dedupe) {\n        if (typeof modules === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            modules = [\n                [\n                    null,\n                    modules,\n                    \"\"\n                ]\n            ];\n        }\n        var alreadyImportedModules = {};\n        if (dedupe) {\n            for(var i = 0; i < this.length; i++){\n                // eslint-disable-next-line prefer-destructuring\n                var id = this[i][0];\n                if (id != null) {\n                    alreadyImportedModules[id] = true;\n                }\n            }\n        }\n        for(var _i = 0; _i < modules.length; _i++){\n            var item = [].concat(modules[_i]);\n            if (dedupe && alreadyImportedModules[item[0]]) {\n                continue;\n            }\n            if (mediaQuery) {\n                if (!item[2]) {\n                    item[2] = mediaQuery;\n                } else {\n                    item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n                }\n            }\n            list.push(item);\n        }\n    };\n    return list;\n};\nfunction cssWithMappingToString(item, useSourceMap) {\n    var content = item[1] || \"\" // eslint-disable-next-line prefer-destructuring\n    ;\n    var cssMapping = item[3];\n    if (!cssMapping) {\n        return content;\n    }\n    if (useSourceMap && typeof btoa === \"function\") {\n        var sourceMapping = toComment(cssMapping);\n        var sourceURLs = cssMapping.sources.map(function(source) {\n            return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n        });\n        return [\n            content\n        ].concat(sourceURLs).concat([\n            sourceMapping\n        ]).join(\"\\n\");\n    }\n    return [\n        content\n    ].join(\"\\n\");\n} // Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    return \"/*# \".concat(data, \" */\");\n}\n\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9ydW50aW1lL2FwaS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxxQkFBcUI7QUFDekU7QUFDQTtBQUNBLFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvcnVudGltZS9hcGkuanM/Y2E0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovIC8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcbiAgICB2YXIgbGlzdCA9IFtdIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgICA7XG4gICAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG4gICAgICAgICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgfSAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAgIDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgbW9kdWxlcyA9IFtcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZXMsXG4gICAgICAgICAgICAgICAgICAgIFwiXCJcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgICAgIGlmIChkZWR1cGUpIHtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuICAgICAgICAgICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspe1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuICAgICAgICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gbGlzdDtcbn07XG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICAgIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCBcIlwiIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgIDtcbiAgICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gICAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbiAgICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjb250ZW50XG4gICAgICAgIF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbXG4gICAgICAgICAgICBzb3VyY2VNYXBwaW5nXG4gICAgICAgIF0pLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIGNvbnRlbnRcbiAgICBdLmpvaW4oXCJcXG5cIik7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\n"));

    /***/
  },

  /***/"./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!":
  /*!*******************************************************************************************************************************************!*\
    !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app! ***!
    \*******************************************************************************************************************************************/
  /***/
  function (module, __unused_webpack_exports, __webpack_require__) {
    cov_7dniywjhg().f[4]++;
    cov_7dniywjhg().s[21]++;
    cov_2075eb4ms5().f[2]++;
    cov_7dniywjhg().s[22]++;
    cov_2075eb4ms5().s[3]++;
    cov_7dniywjhg().s[23]++;
    eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_app\",\n      function () {\n        return __webpack_require__(/*! private-next-pages/_app */ \"./pages/_app.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_app\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfYXBwJnBhZ2U9JTJGX2FwcCEuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxpREFBeUI7QUFDaEQ7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzY3ODIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9fYXBwXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19hcHBcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL19hcHBcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\n"));

    /***/
  },

  /***/"./styles/globals.scss":
  /*!*****************************!*\
    !*** ./styles/globals.scss ***!
    \*****************************/
  /***/
  function (module, __unused_webpack_exports, __webpack_require__) {
    cov_7dniywjhg().f[5]++;
    cov_7dniywjhg().s[24]++;
    cov_2075eb4ms5().f[3]++;
    cov_7dniywjhg().s[25]++;
    cov_2075eb4ms5().s[4]++;
    cov_7dniywjhg().s[26]++;
    eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!../node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./globals.scss */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!../node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./globals.scss */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\",\n      function () {\n        content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!../node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./globals.scss */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[10].use[2]!./node_modules/next/dist/build/webpack/loaders/resolve-url-loader/index.js??ruleSet[1].rules[3].oneOf[10].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[3].oneOf[10].use[4]!./styles/globals.scss\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvZ2xvYmFscy5zY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyxvTkFBd0c7QUFDMUgsMEJBQTBCLG1CQUFPLENBQUMsdTRCQUFnYzs7QUFFbGU7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLElBQUksSUFBVTtBQUNkLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGlCQUFpQjtBQUNyQixNQUFNLHU0QkFBZ2M7QUFDdGM7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyx1NEJBQWdjOztBQUUxZDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsVUFBVTs7QUFFMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLFVBQVU7QUFDWjtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvZ2xvYmFscy5zY3NzP2MyM2QiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1zdHlsZS1sb2FkZXIvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbMV0hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbMl0hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbM10hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9zYXNzLWxvYWRlci9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVs0XSEuL2dsb2JhbHMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCwgc3R5bGUtbG9hZGVyIGluamVjdHMgQ1NTIGludG8gdGhlIGJvdHRvbVxuICAgICAgICAgICAgICAgICAgICAvLyBvZiA8aGVhZD4uIFRoaXMgY2F1c2VzIG9yZGVyaW5nIHByb2JsZW1zIGJldHdlZW4gZGV2XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBwcm9kLiBUbyBmaXggdGhpcywgd2UgcmVuZGVyIGEgPG5vc2NyaXB0PiB0YWcgYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYW4gYW5jaG9yIGZvciB0aGUgc3R5bGVzIHRvIGJlIHBsYWNlZCBiZWZvcmUuIFRoZXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgX2JlZm9yZV8gPHN0eWxlIGpzeCBnbG9iYWw+LlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBlbGVtZW50cyBzaG91bGQgYWx3YXlzIGV4aXN0LiBJZiB0aGV5IGRvIG5vdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjb2RlIHNob3VsZCBmYWlsLlxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjX19uZXh0X2Nzc19fRE9fTk9UX1VTRV9fXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFuY2hvckVsZW1lbnQucGFyZW50Tm9kZS8vIE5vcm1hbGx5IDxoZWFkPlxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVhY2ggc3R5bGUgdGFnIHNob3VsZCBiZSBwbGFjZWQgcmlnaHQgYmVmb3JlIG91clxuICAgICAgICAgICAgICAgICAgICAvLyBhbmNob3IuIEJ5IGluc2VydGluZyBiZWZvcmUgYW5kIG5vdCBhZnRlciwgd2UgZG8gbm90XG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gdHJhY2sgdGhlIGxhc3QgaW5zZXJ0ZWQgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgYW5jaG9yRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfTtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2FscyB8fCBtb2R1bGUuaG90LmludmFsaWRhdGUpIHtcbiAgICB2YXIgaXNFcXVhbExvY2FscyA9IGZ1bmN0aW9uIGlzRXF1YWxMb2NhbHMoYSwgYiwgaXNOYW1lZEV4cG9ydCkge1xuICAgIGlmICghYSAmJiBiIHx8IGEgJiYgIWIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgcDtcbiAgICBmb3IocCBpbiBhKXtcbiAgICAgICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhW3BdICE9PSBiW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKHAgaW4gYil7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFbcF0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4gICAgdmFyIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVsxXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVsyXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTBdLnVzZVszXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Nhc3MtbG9hZGVyL2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzRdIS4vZ2xvYmFscy5zY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzFdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzJdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxMF0udXNlWzNdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvc2Fzcy1sb2FkZXIvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEwXS51c2VbNF0hLi9nbG9iYWxzLnNjc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./styles/globals.scss\n"));

    /***/
  },

  /***/"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
  /*!************************************************************************************************************!*\
    !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
    \************************************************************************************************************/
  /***/
  function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";

    cov_7dniywjhg().f[6]++;
    cov_7dniywjhg().s[27]++;
    cov_2075eb4ms5().f[4]++;
    cov_7dniywjhg().s[28]++;
    cov_2075eb4ms5().s[5]++;
    cov_7dniywjhg().s[29]++;
    eval(__webpack_require__.ts("\nconst isOldIE = function isOldIE() {\n    let memo;\n    return function memorize() {\n        if (typeof memo === \"undefined\") {\n            // Test for IE <= 9 as proposed by Browserhacks\n            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n            // Tests for existence of standard globals is to allow style-loader\n            // to operate correctly into non-standard environments\n            // @see https://github.com/webpack-contrib/style-loader/issues/177\n            memo = Boolean(window && document && document.all && !window.atob);\n        }\n        return memo;\n    };\n}();\nconst getTarget = function getTarget() {\n    const memo = {};\n    return function memorize(target) {\n        if (typeof memo[target] === \"undefined\") {\n            let styleTarget = document.querySelector(target);\n            // Special case to return head of iframe instead of iframe itself\n            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n                try {\n                    // This will throw an exception if access to iframe is blocked\n                    // due to cross-origin restrictions\n                    styleTarget = styleTarget.contentDocument.head;\n                } catch (e) {\n                    // istanbul ignore next\n                    styleTarget = null;\n                }\n            }\n            memo[target] = styleTarget;\n        }\n        return memo[target];\n    };\n}();\nconst stylesInDom = [];\nfunction getIndexByIdentifier(identifier) {\n    let result = -1;\n    for(let i = 0; i < stylesInDom.length; i++){\n        if (stylesInDom[i].identifier === identifier) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\nfunction modulesToDom(list, options) {\n    const idCountMap = {};\n    const identifiers = [];\n    for(let i = 0; i < list.length; i++){\n        const item = list[i];\n        const id = options.base ? item[0] + options.base : item[0];\n        const count = idCountMap[id] || 0;\n        const identifier = id + \" \" + count.toString();\n        idCountMap[id] = count + 1;\n        const index = getIndexByIdentifier(identifier);\n        const obj = {\n            css: item[1],\n            media: item[2],\n            sourceMap: item[3]\n        };\n        if (index !== -1) {\n            stylesInDom[index].references++;\n            stylesInDom[index].updater(obj);\n        } else {\n            stylesInDom.push({\n                identifier: identifier,\n                updater: addStyle(obj, options),\n                references: 1\n            });\n        }\n        identifiers.push(identifier);\n    }\n    return identifiers;\n}\nfunction insertStyleElement(options) {\n    const style = document.createElement(\"style\");\n    const attributes = options.attributes || {};\n    if (typeof attributes.nonce === \"undefined\") {\n        const nonce = // eslint-disable-next-line no-undef\n         true ? __webpack_require__.nc : 0;\n        if (nonce) {\n            attributes.nonce = nonce;\n        }\n    }\n    Object.keys(attributes).forEach(function(key) {\n        style.setAttribute(key, attributes[key]);\n    });\n    if (typeof options.insert === \"function\") {\n        options.insert(style);\n    } else {\n        const target = getTarget(options.insert || \"head\");\n        if (!target) {\n            throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n        }\n        target.appendChild(style);\n    }\n    return style;\n}\nfunction removeStyleElement(style) {\n    // istanbul ignore if\n    if (style.parentNode === null) {\n        return false;\n    }\n    style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */ const replaceText = function replaceText() {\n    const textStore = [];\n    return function replace(index, replacement) {\n        textStore[index] = replacement;\n        return textStore.filter(Boolean).join(\"\\n\");\n    };\n}();\nfunction applyToSingletonTag(style, index, remove, obj) {\n    const css = remove ? \"\" : obj.media ? \"@media \" + obj.media + \" {\" + obj.css + \"}\" : obj.css;\n    // For old IE\n    /* istanbul ignore if  */ if (style.styleSheet) {\n        style.styleSheet.cssText = replaceText(index, css);\n    } else {\n        const cssNode = document.createTextNode(css);\n        const childNodes = style.childNodes;\n        if (childNodes[index]) {\n            style.removeChild(childNodes[index]);\n        }\n        if (childNodes.length) {\n            style.insertBefore(cssNode, childNodes[index]);\n        } else {\n            style.appendChild(cssNode);\n        }\n    }\n}\nfunction applyToTag(style, options, obj) {\n    let css = obj.css;\n    const media = obj.media;\n    const sourceMap = obj.sourceMap;\n    if (media) {\n        style.setAttribute(\"media\", media);\n    } else {\n        style.removeAttribute(\"media\");\n    }\n    if (sourceMap && typeof btoa !== \"undefined\") {\n        css += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n    }\n    // For old IE\n    /* istanbul ignore if  */ if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n    } else {\n        while(style.firstChild){\n            style.removeChild(style.firstChild);\n        }\n        style.appendChild(document.createTextNode(css));\n    }\n}\nlet singleton = null;\nlet singletonCounter = 0;\nfunction addStyle(obj, options) {\n    let style;\n    let update;\n    let remove;\n    if (options.singleton) {\n        const styleIndex = singletonCounter++;\n        style = singleton || (singleton = insertStyleElement(options));\n        update = applyToSingletonTag.bind(null, style, styleIndex, false);\n        remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n    } else {\n        style = insertStyleElement(options);\n        update = applyToTag.bind(null, style, options);\n        remove = function() {\n            removeStyleElement(style);\n        };\n    }\n    update(obj);\n    return function updateStyle(newObj) {\n        if (newObj) {\n            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n                return;\n            }\n            update(obj = newObj);\n        } else {\n            remove();\n        }\n    };\n}\nmodule.exports = function(list, options) {\n    options = options || {};\n    // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n    // tags it will allow on a page\n    if (!options.singleton && typeof options.singleton !== \"boolean\") {\n        options.singleton = isOldIE();\n    }\n    list = list || [];\n    let lastIdentifiers = modulesToDom(list, options);\n    return function update(newList) {\n        newList = newList || [];\n        if (Object.prototype.toString.call(newList) !== \"[object Array]\") {\n            return;\n        }\n        for(let i = 0; i < lastIdentifiers.length; i++){\n            const identifier = lastIdentifiers[i];\n            const index = getIndexByIdentifier(identifier);\n            stylesInDom[index].references--;\n        }\n        const newLastIdentifiers = modulesToDom(newList, options);\n        for(let i1 = 0; i1 < lastIdentifiers.length; i1++){\n            const identifier = lastIdentifiers[i1];\n            const index = getIndexByIdentifier(identifier);\n            if (stylesInDom[index].references === 0) {\n                stylesInDom[index].updater();\n                stylesInDom.splice(index, 1);\n            }\n        }\n        lastIdentifiers = newLastIdentifiers;\n    };\n};\n\n//# sourceMappingURL=injectStylesIntoStyleTag.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXN0eWxlLWxvYWRlci9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0JBQXdCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxLQUF3QyxHQUFHLHNCQUFpQixHQUFHLENBQUk7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EscUVBQXFFLGdCQUFnQjtBQUNyRjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDRCQUE0QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZCQUE2QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXN0eWxlLWxvYWRlci9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcz8yNmVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gICAgbGV0IG1lbW87XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgICAgICBpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAgICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAgICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAgICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG59KCk7XG5jb25zdCBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gICAgY29uc3QgbWVtbyA9IHt9O1xuICAgIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGxldCBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgICAgICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICAgIH07XG59KCk7XG5jb25zdCBzdHlsZXNJbkRvbSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICAgIGxldCByZXN1bHQgPSAtMTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgICAgICAgcmVzdWx0ID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGlkQ291bnRNYXAgPSB7fTtcbiAgICBjb25zdCBpZGVudGlmaWVycyA9IFtdO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgaXRlbSA9IGxpc3RbaV07XG4gICAgICAgIGNvbnN0IGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgICAgIGNvbnN0IGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICAgICAgY29uc3QgaWRlbnRpZmllciA9IGlkICsgXCIgXCIgKyBjb3VudC50b1N0cmluZygpO1xuICAgICAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICAgICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgICAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuICAgIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjb25zdCBub25jZSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgICB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gICAgICAgIGlmIChub25jZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgXCJoZWFkXCIpO1xuICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovIGNvbnN0IHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gICAgY29uc3QgdGV4dFN0b3JlID0gW107XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKTtcbiAgICB9O1xufSgpO1xuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gICAgY29uc3QgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiICsgb2JqLm1lZGlhICsgXCIge1wiICsgb2JqLmNzcyArIFwifVwiIDogb2JqLmNzcztcbiAgICAvLyBGb3Igb2xkIElFXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqLyBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG4gICAgICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gICAgbGV0IGNzcyA9IG9iai5jc3M7XG4gICAgY29uc3QgbWVkaWEgPSBvYmoubWVkaWE7XG4gICAgY29uc3Qgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShcIm1lZGlhXCIpO1xuICAgIH1cbiAgICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcbiAgICB9XG4gICAgLy8gRm9yIG9sZCBJRVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi8gaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpe1xuICAgICAgICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gICAgfVxufVxubGV0IHNpbmdsZXRvbiA9IG51bGw7XG5sZXQgc2luZ2xldG9uQ291bnRlciA9IDA7XG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgICBsZXQgc3R5bGU7XG4gICAgbGV0IHVwZGF0ZTtcbiAgICBsZXQgcmVtb3ZlO1xuICAgIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgICAgICBjb25zdCBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgICAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICAgICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgICAgIHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKG9iaik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgICAgICBpZiAobmV3T2JqKSB7XG4gICAgICAgICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG4gICAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICAgIH1cbiAgICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgICBsZXQgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgICAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgICAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgICAgICBmb3IobGV0IGkxID0gMDsgaTEgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpMSsrKXtcbiAgICAgICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaTFdO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgICAgICAgIGlmIChzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgICAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gICAgfTtcbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\n"));

    /***/
  },

  /***/"./pages/_app.tsx":
  /*!************************!*\
    !*** ./pages/_app.tsx ***!
    \************************/
  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    cov_7dniywjhg().f[7]++;
    cov_7dniywjhg().s[30]++;
    cov_2075eb4ms5().f[5]++;
    cov_7dniywjhg().s[31]++;
    cov_2075eb4ms5().s[6]++;
    cov_7dniywjhg().s[32]++;
    eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ App; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _styles_globals_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/globals.scss */ \"./styles/globals.scss\");\n/* harmony import */ var _styles_globals_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_scss__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction App(param) {\n    let { Component , pageProps  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n        ...pageProps\n    }, void 0, false, {\n        fileName: \"/Users/hadad/Desktop/melliom/gigs/zatec/ice-and-fire/pages/_app.tsx\",\n        lineNumber: 5,\n        columnNumber: 10\n    }, this);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQStCO0FBR2hCLFNBQVNBLElBQUksS0FBa0MsRUFBRTtRQUFwQyxFQUFFQyxVQUFTLEVBQUVDLFVBQVMsRUFBWSxHQUFsQztJQUMxQixxQkFBTyw4REFBQ0Q7UUFBVyxHQUFHQyxTQUFTOzs7Ozs7QUFDakMsQ0FBQztLQUZ1QkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvX2FwcC50c3g/MmZiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL3N0eWxlcy9nbG9iYWxzLnNjc3MnXG5pbXBvcnQgdHlwZSB7IEFwcFByb3BzIH0gZnJvbSAnbmV4dC9hcHAnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH06IEFwcFByb3BzKSB7XG4gIHJldHVybiA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XG59XG4iXSwibmFtZXMiOlsiQXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n"));

    /***/
  },

  /***/"./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
    \*********************************************************************/
  /***/
  function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";

    cov_7dniywjhg().f[8]++;
    cov_7dniywjhg().s[33]++;
    cov_2075eb4ms5().f[6]++;
    cov_7dniywjhg().s[34]++;
    cov_2075eb4ms5().s[7]++;
    cov_7dniywjhg().s[35]++;
    eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n"));

    /***/
  },

  /***/"./node_modules/react/jsx-dev-runtime.js":
  /*!***********************************************!*\
    !*** ./node_modules/react/jsx-dev-runtime.js ***!
    \***********************************************/
  /***/
  function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";

    cov_7dniywjhg().f[9]++;
    cov_7dniywjhg().s[36]++;
    cov_2075eb4ms5().f[7]++;
    cov_7dniywjhg().s[37]++;
    cov_2075eb4ms5().s[8]++;
    cov_7dniywjhg().s[38]++;
    eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81Nzc3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n"));

    /***/
  }
}, /******/function (__webpack_require__) {
  cov_7dniywjhg().f[10]++;
  cov_7dniywjhg().s[39]++;
  cov_2075eb4ms5().f[8]++;
  cov_7dniywjhg().s[40]++;
  cov_2075eb4ms5().s[9]++;
  // webpackRuntimeModules
  /******/
  cov_7dniywjhg().s[41]++;
  var __webpack_exec__ = function (moduleId) {
    cov_7dniywjhg().f[11]++;
    cov_7dniywjhg().s[42]++;
    cov_2075eb4ms5().f[9]++;
    cov_7dniywjhg().s[43]++;
    cov_2075eb4ms5().s[10]++;
    cov_7dniywjhg().s[44]++;
    return __webpack_require__(__webpack_require__.s = moduleId);
  };
  /******/
  cov_7dniywjhg().s[45]++;
  cov_2075eb4ms5().s[11]++;
  cov_7dniywjhg().s[46]++;
  __webpack_require__.O(0, ["main"], function () {
    cov_7dniywjhg().f[12]++;
    cov_7dniywjhg().s[47]++;
    cov_2075eb4ms5().f[10]++;
    cov_7dniywjhg().s[48]++;
    cov_2075eb4ms5().s[12]++;
    cov_7dniywjhg().s[49]++;
    return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!"), __webpack_exec__("./node_modules/next/dist/client/router.js");
  });
  /******/
  var __webpack_exports__ = (cov_7dniywjhg().s[50]++, (cov_2075eb4ms5().s[13]++, __webpack_require__.O()));
  /******/
  cov_7dniywjhg().s[51]++;
  cov_2075eb4ms5().s[14]++;
  cov_7dniywjhg().s[52]++;
  _N_E = __webpack_exports__;
  /******/
}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,